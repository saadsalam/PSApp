//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppWorks.UI.AppService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppService.IAppWorksServices", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IAppWorksServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetTableColumnNames", ReplyAction="http://tempuri.org/IAppWorksServices/GetTableColumnNamesResponse")]
        string[] GetTableColumnNames(string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetTableColumnNames", ReplyAction="http://tempuri.org/IAppWorksServices/GetTableColumnNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetTableColumnNamesAsync(string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckDuplicateCalenderAndPeriod", ReplyAction="http://tempuri.org/IAppWorksServices/CheckDuplicateCalenderAndPeriodResponse")]
        bool CheckDuplicateCalenderAndPeriod(int year, int period);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckDuplicateCalenderAndPeriod", ReplyAction="http://tempuri.org/IAppWorksServices/CheckDuplicateCalenderAndPeriodResponse")]
        System.Threading.Tasks.Task<bool> CheckDuplicateCalenderAndPeriodAsync(int year, int period);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVehicleLegsInfo", ReplyAction="http://tempuri.org/IAppWorksServices/GetVehicleLegsInfoResponse")]
        AppWorksService.Properties.VehicleLegCountProp[] GetVehicleLegsInfo(int recordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVehicleLegsInfo", ReplyAction="http://tempuri.org/IAppWorksServices/GetVehicleLegsInfoResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VehicleLegCountProp[]> GetVehicleLegsInfoAsync(int recordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetInvoiceCreditCostCenterNumber", ReplyAction="http://tempuri.org/IAppWorksServices/GetInvoiceCreditCostCenterNumberResponse")]
        int GetInvoiceCreditCostCenterNumber();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetInvoiceCreditCostCenterNumber", ReplyAction="http://tempuri.org/IAppWorksServices/GetInvoiceCreditCostCenterNumberResponse")]
        System.Threading.Tasks.Task<int> GetInvoiceCreditCostCenterNumberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertBillingLineItems", ReplyAction="http://tempuri.org/IAppWorksServices/InsertBillingLineItemsResponse")]
        int InsertBillingLineItems(AppWorksService.Properties.BillingLineItemsProp objBillingLineprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertBillingLineItems", ReplyAction="http://tempuri.org/IAppWorksServices/InsertBillingLineItemsResponse")]
        System.Threading.Tasks.Task<int> InsertBillingLineItemsAsync(AppWorksService.Properties.BillingLineItemsProp objBillingLineprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateCustomerAddredss", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateCustomerAddredssResponse")]
        bool UpdateCustomerAddredss(string addressType, int customerID, int locationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateCustomerAddredss", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateCustomerAddredssResponse")]
        System.Threading.Tasks.Task<bool> UpdateCustomerAddredssAsync(string addressType, int customerID, int locationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCustomerAddredssType", ReplyAction="http://tempuri.org/IAppWorksServices/GetCustomerAddredssTypeResponse")]
        string GetCustomerAddredssType(int locationID, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCustomerAddredssType", ReplyAction="http://tempuri.org/IAppWorksServices/GetCustomerAddredssTypeResponse")]
        System.Threading.Tasks.Task<string> GetCustomerAddredssTypeAsync(int locationID, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCodeDetailsForInvoice", ReplyAction="http://tempuri.org/IAppWorksServices/GetCodeDetailsForInvoiceResponse")]
        AppWorksService.Properties.CodeProp[] GetCodeDetailsForInvoice(string codeType, string codeDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCodeDetailsForInvoice", ReplyAction="http://tempuri.org/IAppWorksServices/GetCodeDetailsForInvoiceResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.CodeProp[]> GetCodeDetailsForInvoiceAsync(string codeType, string codeDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetInvoiceDataForInvoicePrint", ReplyAction="http://tempuri.org/IAppWorksServices/GetInvoiceDataForInvoicePrintResponse")]
        AppWorksService.Properties.PortStoragePrintInvoiceProp[] GetInvoiceDataForInvoicePrint(int ReprintInd, int ReprintType, int DateType, System.Nullable<System.DateTime> InvoiceDateFrom, System.Nullable<System.DateTime> InvoiceDateTo, string InvoiceNumberFrom, string InvoiceNumberTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetInvoiceDataForInvoicePrint", ReplyAction="http://tempuri.org/IAppWorksServices/GetInvoiceDataForInvoicePrintResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStoragePrintInvoiceProp[]> GetInvoiceDataForInvoicePrintAsync(int ReprintInd, int ReprintType, int DateType, System.Nullable<System.DateTime> InvoiceDateFrom, System.Nullable<System.DateTime> InvoiceDateTo, string InvoiceNumberFrom, string InvoiceNumberTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVehicleListingReport", ReplyAction="http://tempuri.org/IAppWorksServices/GetVehicleListingReportResponse")]
        AppWorksService.Properties.VehicleListingReportProp[] GetVehicleListingReport(int ReportType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate, bool GroupByDealerInd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVehicleListingReport", ReplyAction="http://tempuri.org/IAppWorksServices/GetVehicleListingReportResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VehicleListingReportProp[]> GetVehicleListingReportAsync(int ReportType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate, bool GroupByDealerInd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadCustomerList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadCustomerListResponse")]
        AppWorksService.Properties.PortStorageRequestsReportProp[] LoadCustomerList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadCustomerList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadCustomerListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageRequestsReportProp[]> LoadCustomerListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadBatchList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadBatchListResponse")]
        AppWorksService.Properties.PortStorageRequestsReportProp[] LoadBatchList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadBatchList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadBatchListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageRequestsReportProp[]> LoadBatchListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageRequestReport", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageRequestReportResponse")]
        AppWorksService.Properties.PortStorageRequestsReportProp[] GetPortStorageRequestReport(int ReportType, int CustomerId, string VIN, System.Nullable<System.DateTime> RequestDateFrom, System.Nullable<System.DateTime> RequestDateTo, int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageRequestReport", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageRequestReportResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageRequestsReportProp[]> GetPortStorageRequestReportAsync(int ReportType, int CustomerId, string VIN, System.Nullable<System.DateTime> RequestDateFrom, System.Nullable<System.DateTime> RequestDateTo, int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleSummeryReport", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleSummeryReportResponse")]
        AppWorksService.Properties.VehicleListingReportProp[] GetPortStorageVehicleSummeryReport(int ReportType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleSummeryReport", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleSummeryReportResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VehicleListingReportProp[]> GetPortStorageVehicleSummeryReportAsync(int ReportType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageLaneSummaryList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageLaneSummaryListResponse")]
        AppWorksService.Properties.PortStorageInventoryList[] GetPortStorageLaneSummaryList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageLaneSummaryList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageLaneSummaryListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInventoryList[]> GetPortStorageLaneSummaryListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageInBoundList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageInBoundListResponse")]
        AppWorksService.Properties.PortStorageInventoryList[] GetPortStorageInBoundList(System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageInBoundList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageInBoundListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInventoryList[]> GetPortStorageInBoundListAsync(System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetDAIAddressName", ReplyAction="http://tempuri.org/IAppWorksServices/GetDAIAddressNameResponse")]
        AppWorksService.Properties.UserApplicationConstantsProp[] GetDAIAddressName(string userCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetDAIAddressName", ReplyAction="http://tempuri.org/IAppWorksServices/GetDAIAddressNameResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.UserApplicationConstantsProp[]> GetDAIAddressNameAsync(string userCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadInvoiceList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadInvoiceListResponse")]
        AppWorksService.Properties.InvoiceListProp[] LoadInvoiceList(System.Nullable<int> billinID, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadInvoiceList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadInvoiceListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.InvoiceListProp[]> LoadInvoiceListAsync(System.Nullable<int> billinID, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBatchLocationImport", ReplyAction="http://tempuri.org/IAppWorksServices/GetBatchLocationImportResponse")]
        AppWorksService.Properties.PortStorageInventoryList[] GetBatchLocationImport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBatchLocationImport", ReplyAction="http://tempuri.org/IAppWorksServices/GetBatchLocationImportResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInventoryList[]> GetBatchLocationImportAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetInventoryComparisionList", ReplyAction="http://tempuri.org/IAppWorksServices/GetInventoryComparisionListResponse")]
        AppWorksService.Properties.PortStorageInventoryList[] GetInventoryComparisionList(System.Nullable<int> batchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetInventoryComparisionList", ReplyAction="http://tempuri.org/IAppWorksServices/GetInventoryComparisionListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInventoryList[]> GetInventoryComparisionListAsync(System.Nullable<int> batchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateRequestPrintIndexForVehicles", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateRequestPrintIndexForVehiclesResponse")]
        bool UpdateRequestPrintIndexForVehicles(string[] vehicleIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateRequestPrintIndexForVehicles", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateRequestPrintIndexForVehiclesResponse")]
        System.Threading.Tasks.Task<bool> UpdateRequestPrintIndexForVehiclesAsync(string[] vehicleIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetUsers", ReplyAction="http://tempuri.org/IAppWorksServices/GetUsersResponse")]
        AppWorksService.Properties.WebPortalUserList[] GetUsers(AppWorksService.Properties.WebPortalUserList objUserList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetUsers", ReplyAction="http://tempuri.org/IAppWorksServices/GetUsersResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.WebPortalUserList[]> GetUsersAsync(AppWorksService.Properties.WebPortalUserList objUserList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetModules", ReplyAction="http://tempuri.org/IAppWorksServices/GetModulesResponse")]
        AppWorksService.Properties.ModuleList[] GetModules(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetModules", ReplyAction="http://tempuri.org/IAppWorksServices/GetModulesResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.ModuleList[]> GetModulesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCustomers", ReplyAction="http://tempuri.org/IAppWorksServices/GetCustomersResponse")]
        AppWorksService.Properties.UserCustomerList[] GetCustomers(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCustomers", ReplyAction="http://tempuri.org/IAppWorksServices/GetCustomersResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.UserCustomerList[]> GetCustomersAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddUser", ReplyAction="http://tempuri.org/IAppWorksServices/AddUserResponse")]
        bool AddUser(AppWorksService.Properties.WebPortalUserList objUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddUser", ReplyAction="http://tempuri.org/IAppWorksServices/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(AppWorksService.Properties.WebPortalUserList objUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddUserCustomer", ReplyAction="http://tempuri.org/IAppWorksServices/AddUserCustomerResponse")]
        bool AddUserCustomer(AppWorksService.Properties.UserCustomerList objUserCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddUserCustomer", ReplyAction="http://tempuri.org/IAppWorksServices/AddUserCustomerResponse")]
        System.Threading.Tasks.Task<bool> AddUserCustomerAsync(AppWorksService.Properties.UserCustomerList objUserCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddUserModule", ReplyAction="http://tempuri.org/IAppWorksServices/AddUserModuleResponse")]
        bool AddUserModule(AppWorksService.Properties.ModuleList objModuleUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddUserModule", ReplyAction="http://tempuri.org/IAppWorksServices/AddUserModuleResponse")]
        System.Threading.Tasks.Task<bool> AddUserModuleAsync(AppWorksService.Properties.ModuleList objModuleUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteUser", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteUserResponse")]
        bool DeleteUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteUser", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetRoles", ReplyAction="http://tempuri.org/IAppWorksServices/GetRolesResponse")]
        AppWorksService.Properties.RoleList[] GetRoles(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetRoles", ReplyAction="http://tempuri.org/IAppWorksServices/GetRolesResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.RoleList[]> GetRolesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetGroups", ReplyAction="http://tempuri.org/IAppWorksServices/GetGroupsResponse")]
        AppWorksService.Properties.GroupList[] GetGroups(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetGroups", ReplyAction="http://tempuri.org/IAppWorksServices/GetGroupsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.GroupList[]> GetGroupsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertUpdateUser", ReplyAction="http://tempuri.org/IAppWorksServices/InsertUpdateUserResponse")]
        bool InsertUpdateUser(AppWorksService.Properties.WebPortalUserList objUser, AppWorksService.Properties.UserCustomerList[] lstUserCustomer, AppWorksService.Properties.ModuleList[] lstUserModules, AppWorksService.Properties.RoleList[] lstUserRoles, AppWorksService.Properties.GroupList[] lstUserGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertUpdateUser", ReplyAction="http://tempuri.org/IAppWorksServices/InsertUpdateUserResponse")]
        System.Threading.Tasks.Task<bool> InsertUpdateUserAsync(AppWorksService.Properties.WebPortalUserList objUser, AppWorksService.Properties.UserCustomerList[] lstUserCustomer, AppWorksService.Properties.ModuleList[] lstUserModules, AppWorksService.Properties.RoleList[] lstUserRoles, AppWorksService.Properties.GroupList[] lstUserGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckDuplicateEmail", ReplyAction="http://tempuri.org/IAppWorksServices/CheckDuplicateEmailResponse")]
        bool CheckDuplicateEmail(string emailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckDuplicateEmail", ReplyAction="http://tempuri.org/IAppWorksServices/CheckDuplicateEmailResponse")]
        System.Threading.Tasks.Task<bool> CheckDuplicateEmailAsync(string emailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckDuplicatePortalUserName", ReplyAction="http://tempuri.org/IAppWorksServices/CheckDuplicatePortalUserNameResponse")]
        bool CheckDuplicatePortalUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckDuplicatePortalUserName", ReplyAction="http://tempuri.org/IAppWorksServices/CheckDuplicatePortalUserNameResponse")]
        System.Threading.Tasks.Task<bool> CheckDuplicatePortalUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageInventoryDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageInventoryDetailsResponse")]
        AppWorksService.Properties.PortStorageVehicleProp[] GetPortStorageInventoryDetails(AppWorksService.Properties.PortStorageVehicleProp objPortStorageProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageInventoryDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageInventoryDetailsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleProp[]> GetPortStorageInventoryDetailsAsync(AppWorksService.Properties.PortStorageVehicleProp objPortStorageProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateRequestCheckedVehicles", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateRequestCheckedVehiclesResponse")]
        bool UpdateRequestCheckedVehicles(AppWorksService.Properties.PortStorageVehicleProp[] lstRequestedVechicles, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateRequestCheckedVehicles", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateRequestCheckedVehiclesResponse")]
        System.Threading.Tasks.Task<bool> UpdateRequestCheckedVehiclesAsync(AppWorksService.Properties.PortStorageVehicleProp[] lstRequestedVechicles, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckMultipleVIN", ReplyAction="http://tempuri.org/IAppWorksServices/CheckMultipleVINResponse")]
        bool CheckMultipleVIN(string vIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckMultipleVIN", ReplyAction="http://tempuri.org/IAppWorksServices/CheckMultipleVINResponse")]
        System.Threading.Tasks.Task<bool> CheckMultipleVINAsync(string vIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetDecodedPortStorageVIN", ReplyAction="http://tempuri.org/IAppWorksServices/GetDecodedPortStorageVINResponse")]
        AppWorksService.Properties.PortStorageVehicleProp GetDecodedPortStorageVIN(string vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetDecodedPortStorageVIN", ReplyAction="http://tempuri.org/IAppWorksServices/GetDecodedPortStorageVINResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleProp> GetDecodedPortStorageVINAsync(string vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertDecodeVIN", ReplyAction="http://tempuri.org/IAppWorksServices/InsertDecodeVINResponse")]
        bool InsertDecodeVIN(AppWorksService.Properties.VINDecodeList objVINDecode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertDecodeVIN", ReplyAction="http://tempuri.org/IAppWorksServices/InsertDecodeVINResponse")]
        System.Threading.Tasks.Task<bool> InsertDecodeVINAsync(AppWorksService.Properties.VINDecodeList objVINDecode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetDecodedVINForVINDecode", ReplyAction="http://tempuri.org/IAppWorksServices/GetDecodedVINForVINDecodeResponse")]
        AppWorksService.Properties.VINDecodeList GetDecodedVINForVINDecode(string vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetDecodedVINForVINDecode", ReplyAction="http://tempuri.org/IAppWorksServices/GetDecodedVINForVINDecodeResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VINDecodeList> GetDecodedVINForVINDecodeAsync(string vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetDecodeDataFromWeb", ReplyAction="http://tempuri.org/IAppWorksServices/GetDecodeDataFromWebResponse")]
        AppWorksService.Properties.VINDecodeList GetDecodeDataFromWeb(string vin, string bodyStylep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetDecodeDataFromWeb", ReplyAction="http://tempuri.org/IAppWorksServices/GetDecodeDataFromWebResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VINDecodeList> GetDecodeDataFromWebAsync(string vin, string bodyStylep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetRolesSelection", ReplyAction="http://tempuri.org/IAppWorksServices/GetRolesSelectionResponse")]
        AppWorksService.Properties.RoleList[] GetRolesSelection(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetRolesSelection", ReplyAction="http://tempuri.org/IAppWorksServices/GetRolesSelectionResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.RoleList[]> GetRolesSelectionAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingRecordExport", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingRecordExportResponse")]
        AppWorksService.Properties.BillingLineItemsProp[] GetBillingRecordExport(int ExportType, System.Nullable<System.DateTime> ExportDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingRecordExport", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingRecordExportResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.BillingLineItemsProp[]> GetBillingRecordExportAsync(int ExportType, System.Nullable<System.DateTime> ExportDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingExportBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingExportBatchIdResponse")]
        int GetBillingExportBatchId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingExportBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingExportBatchIdResponse")]
        System.Threading.Tasks.Task<int> GetBillingExportBatchIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/SetBillingExportNextBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/SetBillingExportNextBatchIdResponse")]
        bool SetBillingExportNextBatchId(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/SetBillingExportNextBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/SetBillingExportNextBatchIdResponse")]
        System.Threading.Tasks.Task<bool> SetBillingExportNextBatchIdAsync(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingExportFilePath", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingExportFilePathResponse")]
        string GetBillingExportFilePath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingExportFilePath", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingExportFilePathResponse")]
        System.Threading.Tasks.Task<string> GetBillingExportFilePathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateBillingLineItem", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateBillingLineItemResponse")]
        void UpdateBillingLineItem(int BatchId, int BillingLineItemsID, string UserCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateBillingLineItem", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateBillingLineItemResponse")]
        System.Threading.Tasks.Task UpdateBillingLineItemAsync(int BatchId, int BillingLineItemsID, string UserCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LogErrorToDb", ReplyAction="http://tempuri.org/IAppWorksServices/LogErrorToDbResponse")]
        void LogErrorToDb(AppWorksService.Properties.ErrorLogProp errorProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LogErrorToDb", ReplyAction="http://tempuri.org/IAppWorksServices/LogErrorToDbResponse")]
        System.Threading.Tasks.Task LogErrorToDbAsync(AppWorksService.Properties.ErrorLogProp errorProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateStorageVehicleOutgate", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateStorageVehicleOutgateResponse")]
        AppWorksService.Properties.StorageVehicleOutgateProp[] UpdateStorageVehicleOutgate(AppWorksService.Properties.StorageVehicleOutgateProp objStorageVehicleOutgateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateStorageVehicleOutgate", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateStorageVehicleOutgateResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.StorageVehicleOutgateProp[]> UpdateStorageVehicleOutgateAsync(AppWorksService.Properties.StorageVehicleOutgateProp objStorageVehicleOutgateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesBatchIdResponse")]
        int GetPortStorageVehiclesBatchId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesBatchIdResponse")]
        System.Threading.Tasks.Task<int> GetPortStorageVehiclesBatchIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/SetPortStorageVehiclesNextBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/SetPortStorageVehiclesNextBatchIdResponse")]
        bool SetPortStorageVehiclesNextBatchId(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/SetPortStorageVehiclesNextBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/SetPortStorageVehiclesNextBatchIdResponse")]
        System.Threading.Tasks.Task<bool> SetPortStorageVehiclesNextBatchIdAsync(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ImportPortStorageVehicles", ReplyAction="http://tempuri.org/IAppWorksServices/ImportPortStorageVehiclesResponse")]
        AppWorksService.Properties.PortStorageVehicleImportProp ImportPortStorageVehicles(int BatchId, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ImportPortStorageVehicles", ReplyAction="http://tempuri.org/IAppWorksServices/ImportPortStorageVehiclesResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp> ImportPortStorageVehiclesAsync(int BatchId, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleImportList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleImportListResponse")]
        AppWorksService.Properties.PortStorageVehicleImportProp[] GetPortStorageVehicleImportList(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleImportList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleImportListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp[]> GetPortStorageVehicleImportListAsync(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadVehiclesBatchList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadVehiclesBatchListResponse")]
        AppWorksService.Properties.PortStorageVehicleImportProp[] LoadVehiclesBatchList(string Vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadVehiclesBatchList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadVehiclesBatchListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp[]> LoadVehiclesBatchListAsync(string Vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileDirectory", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileDirectoryRes" +
            "ponse")]
        string GetPortStorageVehiclesImportFileDirectory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileDirectory", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileDirectoryRes" +
            "ponse")]
        System.Threading.Tasks.Task<string> GetPortStorageVehiclesImportFileDirectoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileName", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileNameResponse" +
            "")]
        string GetPortStorageVehiclesImportFileName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileName", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileNameResponse" +
            "")]
        System.Threading.Tasks.Task<string> GetPortStorageVehiclesImportFileNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileArchiveDirec" +
            "tory", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileArchiveDirec" +
            "toryResponse")]
        string GetPortStorageVehiclesImportFileArchiveDirectory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileArchiveDirec" +
            "tory", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehiclesImportFileArchiveDirec" +
            "toryResponse")]
        System.Threading.Tasks.Task<string> GetPortStorageVehiclesImportFileArchiveDirectoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageLocationBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageLocationBatchIdResponse")]
        int GetPortStorageLocationBatchId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageLocationBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageLocationBatchIdResponse")]
        System.Threading.Tasks.Task<int> GetPortStorageLocationBatchIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/SetPortStorageLocationNextBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/SetPortStorageLocationNextBatchIdResponse")]
        bool SetPortStorageLocationNextBatchId(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/SetPortStorageLocationNextBatchId", ReplyAction="http://tempuri.org/IAppWorksServices/SetPortStorageLocationNextBatchIdResponse")]
        System.Threading.Tasks.Task<bool> SetPortStorageLocationNextBatchIdAsync(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ImportPortStorageLocation", ReplyAction="http://tempuri.org/IAppWorksServices/ImportPortStorageLocationResponse")]
        AppWorksService.Properties.PortStorageVehicleImportProp ImportPortStorageLocation(int BatchId, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ImportPortStorageLocation", ReplyAction="http://tempuri.org/IAppWorksServices/ImportPortStorageLocationResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp> ImportPortStorageLocationAsync(int BatchId, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageLocationImportList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageLocationImportListResponse")]
        AppWorksService.Properties.PortStorageVehicleImportProp[] GetPortStorageLocationImportList(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageLocationImportList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageLocationImportListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp[]> GetPortStorageLocationImportListAsync(int BatchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadLocationBatchList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadLocationBatchListResponse")]
        AppWorksService.Properties.PortStorageVehicleImportProp[] LoadLocationBatchList(string Vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadLocationBatchList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadLocationBatchListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp[]> LoadLocationBatchListAsync(string Vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageLocationImportFileName", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageLocationImportFileNameResponse" +
            "")]
        string GetPortStorageLocationImportFileName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageLocationImportFileName", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageLocationImportFileNameResponse" +
            "")]
        System.Threading.Tasks.Task<string> GetPortStorageLocationImportFileNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LocationImportTransactionProcess", ReplyAction="http://tempuri.org/IAppWorksServices/LocationImportTransactionProcessResponse")]
        bool LocationImportTransactionProcess(int BatchId, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LocationImportTransactionProcess", ReplyAction="http://tempuri.org/IAppWorksServices/LocationImportTransactionProcessResponse")]
        System.Threading.Tasks.Task<bool> LocationImportTransactionProcessAsync(int BatchId, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/VehicleImportTransactionProcess", ReplyAction="http://tempuri.org/IAppWorksServices/VehicleImportTransactionProcessResponse")]
        bool VehicleImportTransactionProcess(int BatchId, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/VehicleImportTransactionProcess", ReplyAction="http://tempuri.org/IAppWorksServices/VehicleImportTransactionProcessResponse")]
        System.Threading.Tasks.Task<bool> VehicleImportTransactionProcessAsync(int BatchId, string User);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/GetSystemSettingsResponse")]
        AppWorksService.Properties.AdminUserProp[] GetSystemSettings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/GetSystemSettingsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.AdminUserProp[]> GetSystemSettingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateCompanyInfo", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateCompanyInfoResponse")]
        bool UpdateCompanyInfo(AppWorksService.Properties.UserApplicationConstantsProp objCompanyinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateCompanyInfo", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateCompanyInfoResponse")]
        System.Threading.Tasks.Task<bool> UpdateCompanyInfoAsync(AppWorksService.Properties.UserApplicationConstantsProp objCompanyinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetStorageVehicleDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetStorageVehicleDetailsResponse")]
        AppWorksService.Properties.PortStorageVehicleProp[] GetStorageVehicleDetails(AppWorksService.Properties.PortStorageVehicleProp objPortstorageProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetStorageVehicleDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetStorageVehicleDetailsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleProp[]> GetStorageVehicleDetailsAsync(AppWorksService.Properties.PortStorageVehicleProp objPortstorageProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLineItemsList", ReplyAction="http://tempuri.org/IAppWorksServices/GetLineItemsListResponse")]
        AppWorksService.Properties.BillingLineItemsProp[] GetLineItemsList(AppWorksService.Properties.BillingLineItemsProp objLineItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLineItemsList", ReplyAction="http://tempuri.org/IAppWorksServices/GetLineItemsListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.BillingLineItemsProp[]> GetLineItemsListAsync(AppWorksService.Properties.BillingLineItemsProp objLineItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ResetExportedInd", ReplyAction="http://tempuri.org/IAppWorksServices/ResetExportedIndResponse")]
        bool ResetExportedInd(int billingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ResetExportedInd", ReplyAction="http://tempuri.org/IAppWorksServices/ResetExportedIndResponse")]
        System.Threading.Tasks.Task<bool> ResetExportedIndAsync(int billingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertBilling", ReplyAction="http://tempuri.org/IAppWorksServices/InsertBillingResponse")]
        int InsertBilling(AppWorksService.Properties.BillingListProp objBillingProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertBilling", ReplyAction="http://tempuri.org/IAppWorksServices/InsertBillingResponse")]
        System.Threading.Tasks.Task<int> InsertBillingAsync(AppWorksService.Properties.BillingListProp objBillingProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateBillingTab", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateBillingTabResponse")]
        bool UpdateBillingTab(AppWorksService.Properties.BillingListProp objBillingProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateBillingTab", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateBillingTabResponse")]
        System.Threading.Tasks.Task<bool> UpdateBillingTabAsync(AppWorksService.Properties.BillingListProp objBillingProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteBillingData", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteBillingDataResponse")]
        bool DeleteBillingData(int BillingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteBillingData", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteBillingDataResponse")]
        System.Threading.Tasks.Task<bool> DeleteBillingDataAsync(int BillingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/BillingSearch", ReplyAction="http://tempuri.org/IAppWorksServices/BillingSearchResponse")]
        AppWorksService.Properties.BillingProp[] BillingSearch(AppWorksService.Properties.BillingProp objPortStorageProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/BillingSearch", ReplyAction="http://tempuri.org/IAppWorksServices/BillingSearchResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.BillingProp[]> BillingSearchAsync(AppWorksService.Properties.BillingProp objPortStorageProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingData", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingDataResponse")]
        AppWorksService.Properties.BillingListProp GetBillingData(int billingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingData", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingDataResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.BillingListProp> GetBillingDataAsync(int billingID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateStorageVehicleOutgateData", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateStorageVehicleOutgateDataResponse")]
        AppWorksService.Properties.StorageVehicleOutgateProp UpdateStorageVehicleOutgateData(AppWorksService.Properties.StorageVehicleOutgateProp objStorageVehicleOutgateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateStorageVehicleOutgateData", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateStorageVehicleOutgateDataResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.StorageVehicleOutgateProp> UpdateStorageVehicleOutgateDataAsync(AppWorksService.Properties.StorageVehicleOutgateProp objStorageVehicleOutgateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateSystemSettingsResponse")]
        bool UpdateSystemSettings(AppWorksService.Properties.AdminUserProp setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateSystemSettingsResponse")]
        System.Threading.Tasks.Task<bool> UpdateSystemSettingsAsync(AppWorksService.Properties.AdminUserProp setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/FindSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/FindSystemSettingsResponse")]
        AppWorksService.Properties.AdminUserProp[] FindSystemSettings(AppWorksService.Properties.AdminUserProp setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/FindSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/FindSystemSettingsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.AdminUserProp[]> FindSystemSettingsAsync(AppWorksService.Properties.AdminUserProp setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteSystemSettingsResponse")]
        bool DeleteSystemSettings(AppWorksService.Properties.AdminUserProp setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteSystemSettingsResponse")]
        System.Threading.Tasks.Task<bool> DeleteSystemSettingsAsync(AppWorksService.Properties.AdminUserProp setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/InsertSystemSettingsResponse")]
        bool InsertSystemSettings(AppWorksService.Properties.AdminUserProp setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertSystemSettings", ReplyAction="http://tempuri.org/IAppWorksServices/InsertSystemSettingsResponse")]
        System.Threading.Tasks.Task<bool> InsertSystemSettingsAsync(AppWorksService.Properties.AdminUserProp setting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLoggedInUserDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetLoggedInUserDetailsResponse")]
        AppWorksService.Properties.LoginProperties GetLoggedInUserDetails(AppWorksService.Properties.LoginProperties objLoginProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLoggedInUserDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetLoggedInUserDetailsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.LoginProperties> GetLoggedInUserDetailsAsync(AppWorksService.Properties.LoginProperties objLoginProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ValidateLogin", ReplyAction="http://tempuri.org/IAppWorksServices/ValidateLoginResponse")]
        AppWorksService.Properties.LoginResult ValidateLogin(AppWorksService.Properties.LoginProperties objLoginProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ValidateLogin", ReplyAction="http://tempuri.org/IAppWorksServices/ValidateLoginResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.LoginResult> ValidateLoginAsync(AppWorksService.Properties.LoginProperties objLoginProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetUserRole", ReplyAction="http://tempuri.org/IAppWorksServices/GetUserRoleResponse")]
        string[] GetUserRole(AppWorksService.Properties.LoginProperties objLoginProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetUserRole", ReplyAction="http://tempuri.org/IAppWorksServices/GetUserRoleResponse")]
        System.Threading.Tasks.Task<string[]> GetUserRoleAsync(AppWorksService.Properties.LoginProperties objLoginProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UserName", ReplyAction="http://tempuri.org/IAppWorksServices/UserNameResponse")]
        string UserName(AppWorksService.Properties.LoginProperties objLoginProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UserName", ReplyAction="http://tempuri.org/IAppWorksServices/UserNameResponse")]
        System.Threading.Tasks.Task<string> UserNameAsync(AppWorksService.Properties.LoginProperties objLoginProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/IsUserExists", ReplyAction="http://tempuri.org/IAppWorksServices/IsUserExistsResponse")]
        bool IsUserExists(AppWorksService.Properties.AdminUserProp objAdminUserProp, AppWorksService.Properties.RoleList[] lstRoles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/IsUserExists", ReplyAction="http://tempuri.org/IAppWorksServices/IsUserExistsResponse")]
        System.Threading.Tasks.Task<bool> IsUserExistsAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp, AppWorksService.Properties.RoleList[] lstRoles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ExistingUserRole", ReplyAction="http://tempuri.org/IAppWorksServices/ExistingUserRoleResponse")]
        string[] ExistingUserRole(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ExistingUserRole", ReplyAction="http://tempuri.org/IAppWorksServices/ExistingUserRoleResponse")]
        System.Threading.Tasks.Task<string[]> ExistingUserRoleAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AllRoles", ReplyAction="http://tempuri.org/IAppWorksServices/AllRolesResponse")]
        string[] AllRoles(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AllRoles", ReplyAction="http://tempuri.org/IAppWorksServices/AllRolesResponse")]
        System.Threading.Tasks.Task<string[]> AllRolesAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ModifiedUserRole", ReplyAction="http://tempuri.org/IAppWorksServices/ModifiedUserRoleResponse")]
        string[] ModifiedUserRole(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ModifiedUserRole", ReplyAction="http://tempuri.org/IAppWorksServices/ModifiedUserRoleResponse")]
        System.Threading.Tasks.Task<string[]> ModifiedUserRoleAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RemoveUserRole", ReplyAction="http://tempuri.org/IAppWorksServices/RemoveUserRoleResponse")]
        string[] RemoveUserRole(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RemoveUserRole", ReplyAction="http://tempuri.org/IAppWorksServices/RemoveUserRoleResponse")]
        System.Threading.Tasks.Task<string[]> RemoveUserRoleAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RecordList", ReplyAction="http://tempuri.org/IAppWorksServices/RecordListResponse")]
        string[] RecordList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RecordList", ReplyAction="http://tempuri.org/IAppWorksServices/RecordListResponse")]
        System.Threading.Tasks.Task<string[]> RecordListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RoleList", ReplyAction="http://tempuri.org/IAppWorksServices/RoleListResponse")]
        string[] RoleList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RoleList", ReplyAction="http://tempuri.org/IAppWorksServices/RoleListResponse")]
        System.Threading.Tasks.Task<string[]> RoleListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetUserRecord", ReplyAction="http://tempuri.org/IAppWorksServices/GetUserRecordResponse")]
        AppWorksService.Properties.FindUserDetails[] GetUserRecord(AppWorksService.Properties.FindUserProp objFindUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetUserRecord", ReplyAction="http://tempuri.org/IAppWorksServices/GetUserRecordResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.FindUserDetails[]> GetUserRecordAsync(AppWorksService.Properties.FindUserProp objFindUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetModificationRecord", ReplyAction="http://tempuri.org/IAppWorksServices/GetModificationRecordResponse")]
        AppWorksService.Properties.AdminUserDeatils GetModificationRecord(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetModificationRecord", ReplyAction="http://tempuri.org/IAppWorksServices/GetModificationRecordResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.AdminUserDeatils> GetModificationRecordAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateUserDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateUserDetailsResponse")]
        void UpdateUserDetails(AppWorksService.Properties.AdminUserProp objAdminUserProp, AppWorksService.Properties.RoleList[] lstRoles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateUserDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateUserDetailsResponse")]
        System.Threading.Tasks.Task UpdateUserDetailsAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp, AppWorksService.Properties.RoleList[] lstRoles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteUserDetails", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteUserDetailsResponse")]
        void DeleteUserDetails(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteUserDetails", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteUserDetailsResponse")]
        System.Threading.Tasks.Task DeleteUserDetailsAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RemoveUserDetails", ReplyAction="http://tempuri.org/IAppWorksServices/RemoveUserDetailsResponse")]
        int RemoveUserDetails(AppWorksService.Properties.FindUserProp objFindUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RemoveUserDetails", ReplyAction="http://tempuri.org/IAppWorksServices/RemoveUserDetailsResponse")]
        System.Threading.Tasks.Task<int> RemoveUserDetailsAsync(AppWorksService.Properties.FindUserProp objFindUserProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVehicleSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetVehicleSearchDetailsResponse")]
        AppWorksService.Properties.VehicleProp[] GetVehicleSearchDetails(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVehicleSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetVehicleSearchDetailsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> GetVehicleSearchDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertVehicleDetails", ReplyAction="http://tempuri.org/IAppWorksServices/InsertVehicleDetailsResponse")]
        int InsertVehicleDetails(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertVehicleDetails", ReplyAction="http://tempuri.org/IAppWorksServices/InsertVehicleDetailsResponse")]
        System.Threading.Tasks.Task<int> InsertVehicleDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPerDiemVehicalDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetPerDiemVehicalDetailsResponse")]
        AppWorksService.Properties.PerDiemProp[] GetPerDiemVehicalDetails(int portStorageVehiclesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPerDiemVehicalDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetPerDiemVehicalDetailsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PerDiemProp[]> GetPerDiemVehicalDetailsAsync(int portStorageVehiclesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/EditDamageCode", ReplyAction="http://tempuri.org/IAppWorksServices/EditDamageCodeResponse")]
        int EditDamageCode(AppWorksService.Properties.PortStorageDamageDetailsProp objPortStorageDamageDetailsProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/EditDamageCode", ReplyAction="http://tempuri.org/IAppWorksServices/EditDamageCodeResponse")]
        System.Threading.Tasks.Task<int> EditDamageCodeAsync(AppWorksService.Properties.PortStorageDamageDetailsProp objPortStorageDamageDetailsProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCustomerSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetCustomerSearchDetailsResponse")]
        AppWorksService.Properties.CustomerSearchProp[] GetCustomerSearchDetails(AppWorksService.Properties.CustomerSearchProp objCustomerProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCustomerSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetCustomerSearchDetailsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.CustomerSearchProp[]> GetCustomerSearchDetailsAsync(AppWorksService.Properties.CustomerSearchProp objCustomerProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVehiclePerDiemSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetVehiclePerDiemSearchDetailsResponse")]
        AppWorksService.Properties.PerDiemProp[] GetVehiclePerDiemSearchDetails(int portStorageVehiclesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVehiclePerDiemSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetVehiclePerDiemSearchDetailsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PerDiemProp[]> GetVehiclePerDiemSearchDetailsAsync(int portStorageVehiclesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdatePortStorageProcessignDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdatePortStorageProcessignDetailsResponse")]
        int UpdatePortStorageProcessignDetails(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdatePortStorageProcessignDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdatePortStorageProcessignDetailsResponse")]
        System.Threading.Tasks.Task<int> UpdatePortStorageProcessignDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CustomerType", ReplyAction="http://tempuri.org/IAppWorksServices/CustomerTypeResponse")]
        string[] CustomerType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CustomerType", ReplyAction="http://tempuri.org/IAppWorksServices/CustomerTypeResponse")]
        System.Threading.Tasks.Task<string[]> CustomerTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DecodeVIN", ReplyAction="http://tempuri.org/IAppWorksServices/DecodeVINResponse")]
        int DecodeVIN(string Vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DecodeVIN", ReplyAction="http://tempuri.org/IAppWorksServices/DecodeVINResponse")]
        System.Threading.Tasks.Task<int> DecodeVINAsync(string Vin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageProcessignDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageProcessignDetailsResponse")]
        AppWorksService.Properties.VehicleProp[] GetPortStorageProcessignDetails(string VIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageProcessignDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageProcessignDetailsResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> GetPortStorageProcessignDetailsAsync(string VIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdatePortStorageDateOutProcessignDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdatePortStorageDateOutProcessignDetailsRes" +
            "ponse")]
        int UpdatePortStorageDateOutProcessignDetails(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdatePortStorageDateOutProcessignDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdatePortStorageDateOutProcessignDetailsRes" +
            "ponse")]
        System.Threading.Tasks.Task<int> UpdatePortStorageDateOutProcessignDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageDateOutProcessignDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageDateOutProcessignDetailsRespon" +
            "se")]
        AppWorksService.Properties.VehicleProp[] GetPortStorageDateOutProcessignDetails(string VIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageDateOutProcessignDetails", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageDateOutProcessignDetailsRespon" +
            "se")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> GetPortStorageDateOutProcessignDetailsAsync(string VIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLocationHistory", ReplyAction="http://tempuri.org/IAppWorksServices/GetLocationHistoryResponse")]
        AppWorksService.Properties.PortStorageLocationHistoryProp[] GetLocationHistory(int portStorageVehicalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLocationHistory", ReplyAction="http://tempuri.org/IAppWorksServices/GetLocationHistoryResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageLocationHistoryProp[]> GetLocationHistoryAsync(int portStorageVehicalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVecheleDetailByVIN", ReplyAction="http://tempuri.org/IAppWorksServices/GetVecheleDetailByVINResponse")]
        AppWorksService.Properties.VehicleProp GetVecheleDetailByVIN(string VIN, System.Nullable<int> vehicleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetVecheleDetailByVIN", ReplyAction="http://tempuri.org/IAppWorksServices/GetVecheleDetailByVINResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp> GetVecheleDetailByVINAsync(string VIN, System.Nullable<int> vehicleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RequestBatchProcess", ReplyAction="http://tempuri.org/IAppWorksServices/RequestBatchProcessResponse")]
        string RequestBatchProcess(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/RequestBatchProcess", ReplyAction="http://tempuri.org/IAppWorksServices/RequestBatchProcessResponse")]
        System.Threading.Tasks.Task<string> RequestBatchProcessAsync(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DateOutBatchProcess", ReplyAction="http://tempuri.org/IAppWorksServices/DateOutBatchProcessResponse")]
        string DateOutBatchProcess(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DateOutBatchProcess", ReplyAction="http://tempuri.org/IAppWorksServices/DateOutBatchProcessResponse")]
        System.Threading.Tasks.Task<string> DateOutBatchProcessAsync(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckMultipleVecheleDetailByVIN", ReplyAction="http://tempuri.org/IAppWorksServices/CheckMultipleVecheleDetailByVINResponse")]
        AppWorksService.Properties.VehicleProp[] CheckMultipleVecheleDetailByVIN(string VIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckMultipleVecheleDetailByVIN", ReplyAction="http://tempuri.org/IAppWorksServices/CheckMultipleVecheleDetailByVINResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> CheckMultipleVecheleDetailByVINAsync(string VIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InspectionTypeOnly", ReplyAction="http://tempuri.org/IAppWorksServices/InspectionTypeOnlyResponse")]
        string[] InspectionTypeOnly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InspectionTypeOnly", ReplyAction="http://tempuri.org/IAppWorksServices/InspectionTypeOnlyResponse")]
        System.Threading.Tasks.Task<string[]> InspectionTypeOnlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/VehicalStatusList", ReplyAction="http://tempuri.org/IAppWorksServices/VehicalStatusListResponse")]
        string[] VehicalStatusList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/VehicalStatusList", ReplyAction="http://tempuri.org/IAppWorksServices/VehicalStatusListResponse")]
        System.Threading.Tasks.Task<string[]> VehicalStatusListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CallVehialDetailsbyVIN", ReplyAction="http://tempuri.org/IAppWorksServices/CallVehialDetailsbyVINResponse")]
        AppWorksService.Properties.VehicleProp[] CallVehialDetailsbyVIN(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CallVehialDetailsbyVIN", ReplyAction="http://tempuri.org/IAppWorksServices/CallVehialDetailsbyVINResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> CallVehialDetailsbyVINAsync(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateVehicalSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateVehicalSearchDetailsResponse")]
        bool UpdateVehicalSearchDetails(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateVehicalSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateVehicalSearchDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateVehicalSearchDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/BindVehicleDamageDetail", ReplyAction="http://tempuri.org/IAppWorksServices/BindVehicleDamageDetailResponse")]
        AppWorksService.Properties.PortStorageDamageDetailsProp[] BindVehicleDamageDetail(int portStorageVehiclesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/BindVehicleDamageDetail", ReplyAction="http://tempuri.org/IAppWorksServices/BindVehicleDamageDetailResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageDamageDetailsProp[]> BindVehicleDamageDetailAsync(int portStorageVehiclesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddDamageCode", ReplyAction="http://tempuri.org/IAppWorksServices/AddDamageCodeResponse")]
        int AddDamageCode(AppWorksService.Properties.DamageCodeProp objDamageCodeProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddDamageCode", ReplyAction="http://tempuri.org/IAppWorksServices/AddDamageCodeResponse")]
        System.Threading.Tasks.Task<int> AddDamageCodeAsync(AppWorksService.Properties.DamageCodeProp objDamageCodeProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteVehicalSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteVehicalSearchDetailsResponse")]
        bool DeleteVehicalSearchDetails(int VehicleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteVehicalSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteVehicalSearchDetailsResponse")]
        System.Threading.Tasks.Task<bool> DeleteVehicalSearchDetailsAsync(int VehicleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddBillingPeriod", ReplyAction="http://tempuri.org/IAppWorksServices/AddBillingPeriodResponse")]
        int AddBillingPeriod(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddBillingPeriod", ReplyAction="http://tempuri.org/IAppWorksServices/AddBillingPeriodResponse")]
        System.Threading.Tasks.Task<int> AddBillingPeriodAsync(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/FindBillingPeriod", ReplyAction="http://tempuri.org/IAppWorksServices/FindBillingPeriodResponse")]
        AppWorksService.Properties.BillingPeriodprop[] FindBillingPeriod(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/FindBillingPeriod", ReplyAction="http://tempuri.org/IAppWorksServices/FindBillingPeriodResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.BillingPeriodprop[]> FindBillingPeriodAsync(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddCodeAdmin", ReplyAction="http://tempuri.org/IAppWorksServices/AddCodeAdminResponse")]
        int AddCodeAdmin(AppWorksService.Properties.CodeProp objCodeProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddCodeAdmin", ReplyAction="http://tempuri.org/IAppWorksServices/AddCodeAdminResponse")]
        System.Threading.Tasks.Task<int> AddCodeAdminAsync(AppWorksService.Properties.CodeProp objCodeProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CodeTypeList", ReplyAction="http://tempuri.org/IAppWorksServices/CodeTypeListResponse")]
        string[] CodeTypeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CodeTypeList", ReplyAction="http://tempuri.org/IAppWorksServices/CodeTypeListResponse")]
        System.Threading.Tasks.Task<string[]> CodeTypeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateBillingPeriodAdminDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateBillingPeriodAdminDetailsResponse")]
        bool UpdateBillingPeriodAdminDetails(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateBillingPeriodAdminDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateBillingPeriodAdminDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateBillingPeriodAdminDetailsAsync(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteBillingPeriodAdminDetails", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteBillingPeriodAdminDetailsResponse")]
        bool DeleteBillingPeriodAdminDetails(int BillingPeriodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteBillingPeriodAdminDetails", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteBillingPeriodAdminDetailsResponse")]
        System.Threading.Tasks.Task<bool> DeleteBillingPeriodAdminDetailsAsync(int BillingPeriodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/FindCode", ReplyAction="http://tempuri.org/IAppWorksServices/FindCodeResponse")]
        AppWorksService.Properties.CodeProp[] FindCode(AppWorksService.Properties.CodeProp objCodeProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/FindCode", ReplyAction="http://tempuri.org/IAppWorksServices/FindCodeResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.CodeProp[]> FindCodeAsync(AppWorksService.Properties.CodeProp objCodeProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ModifyCodeAdminRecord", ReplyAction="http://tempuri.org/IAppWorksServices/ModifyCodeAdminRecordResponse")]
        bool ModifyCodeAdminRecord(AppWorksService.Properties.CodeProp objCodeProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/ModifyCodeAdminRecord", ReplyAction="http://tempuri.org/IAppWorksServices/ModifyCodeAdminRecordResponse")]
        System.Threading.Tasks.Task<bool> ModifyCodeAdminRecordAsync(AppWorksService.Properties.CodeProp objCodeProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteCodeAdminDetails", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteCodeAdminDetailsResponse")]
        bool DeleteCodeAdminDetails(int CodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteCodeAdminDetails", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteCodeAdminDetailsResponse")]
        System.Threading.Tasks.Task<bool> DeleteCodeAdminDetailsAsync(int CodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageInvoicesList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageInvoicesListResponse")]
        AppWorksService.Properties.PortStorageInvoicesProp[] GetPortStorageInvoicesList(System.Nullable<System.DateTime> cutoffDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageInvoicesList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageInvoicesListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInvoicesProp[]> GetPortStorageInvoicesListAsync(System.Nullable<System.DateTime> cutoffDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadCodeList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadCodeListResponse")]
        AppWorksService.Properties.CodeList[] LoadCodeList(string codeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadCodeList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadCodeListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.CodeList[]> LoadCodeListAsync(string codeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLocationList", ReplyAction="http://tempuri.org/IAppWorksServices/GetLocationListResponse")]
        AppWorksService.Properties.LocationList[] GetLocationList(AppWorksService.Properties.LocationList objLocationProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLocationList", ReplyAction="http://tempuri.org/IAppWorksServices/GetLocationListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.LocationList[]> GetLocationListAsync(AppWorksService.Properties.LocationList objLocationProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingStreetAddress", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingStreetAddressResponse")]
        AppWorksService.Properties.LocationList[] GetBillingStreetAddress(int addressID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingStreetAddress", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingStreetAddressResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.LocationList[]> GetBillingStreetAddressAsync(int addressID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/NotesList", ReplyAction="http://tempuri.org/IAppWorksServices/NotesListResponse")]
        AppWorksService.Properties.CustomerNoteList[] NotesList(int customerID, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/NotesList", ReplyAction="http://tempuri.org/IAppWorksServices/NotesListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.CustomerNoteList[]> NotesListAsync(int customerID, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageRateList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageRateListResponse")]
        AppWorksService.Properties.PortStorageRateList[] GetPortStorageRateList(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageRateList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageRateListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageRateList[]> GetPortStorageRateListAsync(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddPortStorageRate", ReplyAction="http://tempuri.org/IAppWorksServices/AddPortStorageRateResponse")]
        bool AddPortStorageRate(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddPortStorageRate", ReplyAction="http://tempuri.org/IAppWorksServices/AddPortStorageRateResponse")]
        System.Threading.Tasks.Task<bool> AddPortStorageRateAsync(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdatePortStorageRate", ReplyAction="http://tempuri.org/IAppWorksServices/UpdatePortStorageRateResponse")]
        bool UpdatePortStorageRate(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdatePortStorageRate", ReplyAction="http://tempuri.org/IAppWorksServices/UpdatePortStorageRateResponse")]
        System.Threading.Tasks.Task<bool> UpdatePortStorageRateAsync(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeletePortStorageRate", ReplyAction="http://tempuri.org/IAppWorksServices/DeletePortStorageRateResponse")]
        bool DeletePortStorageRate(int portStorageRateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeletePortStorageRate", ReplyAction="http://tempuri.org/IAppWorksServices/DeletePortStorageRateResponse")]
        System.Threading.Tasks.Task<bool> DeletePortStorageRateAsync(int portStorageRateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadPerformanceStndrdOriginLocationList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadPerformanceStndrdOriginLocationListRespo" +
            "nse")]
        AppWorksService.Properties.LocationList[] LoadPerformanceStndrdOriginLocationList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/LoadPerformanceStndrdOriginLocationList", ReplyAction="http://tempuri.org/IAppWorksServices/LoadPerformanceStndrdOriginLocationListRespo" +
            "nse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.LocationList[]> LoadPerformanceStndrdOriginLocationListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddLocationEmailContact", ReplyAction="http://tempuri.org/IAppWorksServices/AddLocationEmailContactResponse")]
        bool AddLocationEmailContact(AppWorksService.Properties.LocationEmailContactList objLocationEmailContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddLocationEmailContact", ReplyAction="http://tempuri.org/IAppWorksServices/AddLocationEmailContactResponse")]
        System.Threading.Tasks.Task<bool> AddLocationEmailContactAsync(AppWorksService.Properties.LocationEmailContactList objLocationEmailContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddLocationPerformanceStandard", ReplyAction="http://tempuri.org/IAppWorksServices/AddLocationPerformanceStandardResponse")]
        bool AddLocationPerformanceStandard(AppWorksService.Properties.LocationPerformanceStandardList objLocationPerformanceStandard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddLocationPerformanceStandard", ReplyAction="http://tempuri.org/IAppWorksServices/AddLocationPerformanceStandardResponse")]
        System.Threading.Tasks.Task<bool> AddLocationPerformanceStandardAsync(AppWorksService.Properties.LocationPerformanceStandardList objLocationPerformanceStandard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateLocationEmailContact", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateLocationEmailContactResponse")]
        bool UpdateLocationEmailContact(AppWorksService.Properties.LocationEmailContactList objLocationEmailContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateLocationEmailContact", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateLocationEmailContactResponse")]
        System.Threading.Tasks.Task<bool> UpdateLocationEmailContactAsync(AppWorksService.Properties.LocationEmailContactList objLocationEmailContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateLocationPerformanceStandard", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateLocationPerformanceStandardResponse")]
        bool UpdateLocationPerformanceStandard(AppWorksService.Properties.LocationPerformanceStandardList objLocationPerformanceStandard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateLocationPerformanceStandard", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateLocationPerformanceStandardResponse")]
        System.Threading.Tasks.Task<bool> UpdateLocationPerformanceStandardAsync(AppWorksService.Properties.LocationPerformanceStandardList objLocationPerformanceStandard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddLocation", ReplyAction="http://tempuri.org/IAppWorksServices/AddLocationResponse")]
        int AddLocation(AppWorksService.Properties.LocationList objLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddLocation", ReplyAction="http://tempuri.org/IAppWorksServices/AddLocationResponse")]
        System.Threading.Tasks.Task<int> AddLocationAsync(AppWorksService.Properties.LocationList objLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddCustomerNotes", ReplyAction="http://tempuri.org/IAppWorksServices/AddCustomerNotesResponse")]
        bool AddCustomerNotes(AppWorksService.Properties.CustomerNoteList objCustomerNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/AddCustomerNotes", ReplyAction="http://tempuri.org/IAppWorksServices/AddCustomerNotesResponse")]
        System.Threading.Tasks.Task<bool> AddCustomerNotesAsync(AppWorksService.Properties.CustomerNoteList objCustomerNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateCustomerNotes", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateCustomerNotesResponse")]
        bool UpdateCustomerNotes(AppWorksService.Properties.CustomerNoteList objCustomerNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateCustomerNotes", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateCustomerNotesResponse")]
        System.Threading.Tasks.Task<bool> UpdateCustomerNotesAsync(AppWorksService.Properties.CustomerNoteList objCustomerNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateCustomerSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateCustomerSearchDetailsResponse")]
        bool UpdateCustomerSearchDetails(AppWorksService.Properties.CustomerSearchProp objcustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateCustomerSearchDetails", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateCustomerSearchDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateCustomerSearchDetailsAsync(AppWorksService.Properties.CustomerSearchProp objcustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertCustomer", ReplyAction="http://tempuri.org/IAppWorksServices/InsertCustomerResponse")]
        int InsertCustomer(AppWorksService.Properties.CustomerSearchProp objCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertCustomer", ReplyAction="http://tempuri.org/IAppWorksServices/InsertCustomerResponse")]
        System.Threading.Tasks.Task<int> InsertCustomerAsync(AppWorksService.Properties.CustomerSearchProp objCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteLocation", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteLocationResponse")]
        bool DeleteLocation(int locationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/DeleteLocation", ReplyAction="http://tempuri.org/IAppWorksServices/DeleteLocationResponse")]
        System.Threading.Tasks.Task<bool> DeleteLocationAsync(int locationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateBilling", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateBillingResponse")]
        bool UpdateBilling(AppWorksService.Properties.BillingProp objBillingprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateBilling", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateBillingResponse")]
        System.Threading.Tasks.Task<bool> UpdateBillingAsync(AppWorksService.Properties.BillingProp objBillingprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdatePostStorageVehicles", ReplyAction="http://tempuri.org/IAppWorksServices/UpdatePostStorageVehiclesResponse")]
        bool UpdatePostStorageVehicles(AppWorksService.Properties.PortStorageVehicleProp objPortStorageVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdatePostStorageVehicles", ReplyAction="http://tempuri.org/IAppWorksServices/UpdatePostStorageVehiclesResponse")]
        System.Threading.Tasks.Task<bool> UpdatePostStorageVehiclesAsync(AppWorksService.Properties.PortStorageVehicleProp objPortStorageVehicleProp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertBillingId", ReplyAction="http://tempuri.org/IAppWorksServices/InsertBillingIdResponse")]
        int InsertBillingId(AppWorksService.Properties.BillingProp objBillingprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/InsertBillingId", ReplyAction="http://tempuri.org/IAppWorksServices/InsertBillingIdResponse")]
        System.Threading.Tasks.Task<int> InsertBillingIdAsync(AppWorksService.Properties.BillingProp objBillingprop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/SetDefaultvalue", ReplyAction="http://tempuri.org/IAppWorksServices/SetDefaultvalueResponse")]
        string SetDefaultvalue(string valueKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/SetDefaultvalue", ReplyAction="http://tempuri.org/IAppWorksServices/SetDefaultvalueResponse")]
        System.Threading.Tasks.Task<string> SetDefaultvalueAsync(string valueKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateSettingsValue", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateSettingsValueResponse")]
        bool UpdateSettingsValue(string invoiceNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateSettingsValue", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateSettingsValueResponse")]
        System.Threading.Tasks.Task<bool> UpdateSettingsValueAsync(string invoiceNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateNextInvoiceNumberValue", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateNextInvoiceNumberValueResponse")]
        bool UpdateNextInvoiceNumberValue(string iInvoiceNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateNextInvoiceNumberValue", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateNextInvoiceNumberValueResponse")]
        System.Threading.Tasks.Task<bool> UpdateNextInvoiceNumberValueAsync(string iInvoiceNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingCount", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingCountResponse")]
        int GetBillingCount(string invoiceNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetBillingCount", ReplyAction="http://tempuri.org/IAppWorksServices/GetBillingCountResponse")]
        System.Threading.Tasks.Task<int> GetBillingCountAsync(string invoiceNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleListResponse")]
        AppWorksService.Properties.PortStorageVehicleProp[] GetPortStorageVehicleList(System.Nullable<System.DateTime> cutoffDate, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleList", ReplyAction="http://tempuri.org/IAppWorksServices/GetPortStorageVehicleListResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleProp[]> GetPortStorageVehicleListAsync(System.Nullable<System.DateTime> cutoffDate, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateLocation", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateLocationResponse")]
        bool UpdateLocation(AppWorksService.Properties.LocationList objLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateLocation", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateLocationResponse")]
        System.Threading.Tasks.Task<bool> UpdateLocationAsync(AppWorksService.Properties.LocationList objLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CalculatePortStoragePerDiem", ReplyAction="http://tempuri.org/IAppWorksServices/CalculatePortStoragePerDiemResponse")]
        string CalculatePortStoragePerDiem(int psVehicleId, string userCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CalculatePortStoragePerDiem", ReplyAction="http://tempuri.org/IAppWorksServices/CalculatePortStoragePerDiemResponse")]
        System.Threading.Tasks.Task<string> CalculatePortStoragePerDiemAsync(int psVehicleId, string userCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/PsRatesCount", ReplyAction="http://tempuri.org/IAppWorksServices/PsRatesCountResponse")]
        int PsRatesCount(System.Nullable<System.DateTime> startDate, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/PsRatesCount", ReplyAction="http://tempuri.org/IAppWorksServices/PsRatesCountResponse")]
        System.Threading.Tasks.Task<int> PsRatesCountAsync(System.Nullable<System.DateTime> startDate, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/PsRatesInvoice", ReplyAction="http://tempuri.org/IAppWorksServices/PsRatesInvoiceResponse")]
        AppWorksService.Properties.PSRatesInvoiceProp PsRatesInvoice(System.Nullable<System.DateTime> startDate, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/PsRatesInvoice", ReplyAction="http://tempuri.org/IAppWorksServices/PsRatesInvoiceResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.PSRatesInvoiceProp> PsRatesInvoiceAsync(System.Nullable<System.DateTime> startDate, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateVehicleRates", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateVehicleRatesResponse")]
        bool UpdateVehicleRates(System.Nullable<decimal> entryRate, System.Nullable<int> perDiemGraceDays, int vehicleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/UpdateVehicleRates", ReplyAction="http://tempuri.org/IAppWorksServices/UpdateVehicleRatesResponse")]
        System.Threading.Tasks.Task<bool> UpdateVehicleRatesAsync(System.Nullable<decimal> entryRate, System.Nullable<int> perDiemGraceDays, int vehicleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckDuplicateCodeAndType", ReplyAction="http://tempuri.org/IAppWorksServices/CheckDuplicateCodeAndTypeResponse")]
        bool CheckDuplicateCodeAndType(string code, string codeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/CheckDuplicateCodeAndType", ReplyAction="http://tempuri.org/IAppWorksServices/CheckDuplicateCodeAndTypeResponse")]
        System.Threading.Tasks.Task<bool> CheckDuplicateCodeAndTypeAsync(string code, string codeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCustomerInfo", ReplyAction="http://tempuri.org/IAppWorksServices/GetCustomerInfoResponse")]
        AppWorksService.Properties.CustomerSearchProp GetCustomerInfo(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetCustomerInfo", ReplyAction="http://tempuri.org/IAppWorksServices/GetCustomerInfoResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.CustomerSearchProp> GetCustomerInfoAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLoadInfo", ReplyAction="http://tempuri.org/IAppWorksServices/GetLoadInfoResponse")]
        AppWorksService.Properties.LoadInfoList[] GetLoadInfo(int billingId, decimal pvRatePercentage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWorksServices/GetLoadInfo", ReplyAction="http://tempuri.org/IAppWorksServices/GetLoadInfoResponse")]
        System.Threading.Tasks.Task<AppWorksService.Properties.LoadInfoList[]> GetLoadInfoAsync(int billingId, decimal pvRatePercentage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppWorksServicesChannel : AppWorks.UI.AppService.IAppWorksServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppWorksServicesClient : System.ServiceModel.ClientBase<AppWorks.UI.AppService.IAppWorksServices>, AppWorks.UI.AppService.IAppWorksServices {
        
        public AppWorksServicesClient() {
        }
        
        public AppWorksServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppWorksServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppWorksServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppWorksServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetTableColumnNames(string tableName) {
            return base.Channel.GetTableColumnNames(tableName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTableColumnNamesAsync(string tableName) {
            return base.Channel.GetTableColumnNamesAsync(tableName);
        }
        
        public bool CheckDuplicateCalenderAndPeriod(int year, int period) {
            return base.Channel.CheckDuplicateCalenderAndPeriod(year, period);
        }
        
        public System.Threading.Tasks.Task<bool> CheckDuplicateCalenderAndPeriodAsync(int year, int period) {
            return base.Channel.CheckDuplicateCalenderAndPeriodAsync(year, period);
        }
        
        public AppWorksService.Properties.VehicleLegCountProp[] GetVehicleLegsInfo(int recordId) {
            return base.Channel.GetVehicleLegsInfo(recordId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VehicleLegCountProp[]> GetVehicleLegsInfoAsync(int recordId) {
            return base.Channel.GetVehicleLegsInfoAsync(recordId);
        }
        
        public int GetInvoiceCreditCostCenterNumber() {
            return base.Channel.GetInvoiceCreditCostCenterNumber();
        }
        
        public System.Threading.Tasks.Task<int> GetInvoiceCreditCostCenterNumberAsync() {
            return base.Channel.GetInvoiceCreditCostCenterNumberAsync();
        }
        
        public int InsertBillingLineItems(AppWorksService.Properties.BillingLineItemsProp objBillingLineprop) {
            return base.Channel.InsertBillingLineItems(objBillingLineprop);
        }
        
        public System.Threading.Tasks.Task<int> InsertBillingLineItemsAsync(AppWorksService.Properties.BillingLineItemsProp objBillingLineprop) {
            return base.Channel.InsertBillingLineItemsAsync(objBillingLineprop);
        }
        
        public bool UpdateCustomerAddredss(string addressType, int customerID, int locationID) {
            return base.Channel.UpdateCustomerAddredss(addressType, customerID, locationID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCustomerAddredssAsync(string addressType, int customerID, int locationID) {
            return base.Channel.UpdateCustomerAddredssAsync(addressType, customerID, locationID);
        }
        
        public string GetCustomerAddredssType(int locationID, int customerID) {
            return base.Channel.GetCustomerAddredssType(locationID, customerID);
        }
        
        public System.Threading.Tasks.Task<string> GetCustomerAddredssTypeAsync(int locationID, int customerID) {
            return base.Channel.GetCustomerAddredssTypeAsync(locationID, customerID);
        }
        
        public AppWorksService.Properties.CodeProp[] GetCodeDetailsForInvoice(string codeType, string codeDesc) {
            return base.Channel.GetCodeDetailsForInvoice(codeType, codeDesc);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.CodeProp[]> GetCodeDetailsForInvoiceAsync(string codeType, string codeDesc) {
            return base.Channel.GetCodeDetailsForInvoiceAsync(codeType, codeDesc);
        }
        
        public AppWorksService.Properties.PortStoragePrintInvoiceProp[] GetInvoiceDataForInvoicePrint(int ReprintInd, int ReprintType, int DateType, System.Nullable<System.DateTime> InvoiceDateFrom, System.Nullable<System.DateTime> InvoiceDateTo, string InvoiceNumberFrom, string InvoiceNumberTo) {
            return base.Channel.GetInvoiceDataForInvoicePrint(ReprintInd, ReprintType, DateType, InvoiceDateFrom, InvoiceDateTo, InvoiceNumberFrom, InvoiceNumberTo);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStoragePrintInvoiceProp[]> GetInvoiceDataForInvoicePrintAsync(int ReprintInd, int ReprintType, int DateType, System.Nullable<System.DateTime> InvoiceDateFrom, System.Nullable<System.DateTime> InvoiceDateTo, string InvoiceNumberFrom, string InvoiceNumberTo) {
            return base.Channel.GetInvoiceDataForInvoicePrintAsync(ReprintInd, ReprintType, DateType, InvoiceDateFrom, InvoiceDateTo, InvoiceNumberFrom, InvoiceNumberTo);
        }
        
        public AppWorksService.Properties.VehicleListingReportProp[] GetVehicleListingReport(int ReportType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate, bool GroupByDealerInd) {
            return base.Channel.GetVehicleListingReport(ReportType, StartDate, EndDate, GroupByDealerInd);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VehicleListingReportProp[]> GetVehicleListingReportAsync(int ReportType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate, bool GroupByDealerInd) {
            return base.Channel.GetVehicleListingReportAsync(ReportType, StartDate, EndDate, GroupByDealerInd);
        }
        
        public AppWorksService.Properties.PortStorageRequestsReportProp[] LoadCustomerList() {
            return base.Channel.LoadCustomerList();
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageRequestsReportProp[]> LoadCustomerListAsync() {
            return base.Channel.LoadCustomerListAsync();
        }
        
        public AppWorksService.Properties.PortStorageRequestsReportProp[] LoadBatchList() {
            return base.Channel.LoadBatchList();
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageRequestsReportProp[]> LoadBatchListAsync() {
            return base.Channel.LoadBatchListAsync();
        }
        
        public AppWorksService.Properties.PortStorageRequestsReportProp[] GetPortStorageRequestReport(int ReportType, int CustomerId, string VIN, System.Nullable<System.DateTime> RequestDateFrom, System.Nullable<System.DateTime> RequestDateTo, int BatchId) {
            return base.Channel.GetPortStorageRequestReport(ReportType, CustomerId, VIN, RequestDateFrom, RequestDateTo, BatchId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageRequestsReportProp[]> GetPortStorageRequestReportAsync(int ReportType, int CustomerId, string VIN, System.Nullable<System.DateTime> RequestDateFrom, System.Nullable<System.DateTime> RequestDateTo, int BatchId) {
            return base.Channel.GetPortStorageRequestReportAsync(ReportType, CustomerId, VIN, RequestDateFrom, RequestDateTo, BatchId);
        }
        
        public AppWorksService.Properties.VehicleListingReportProp[] GetPortStorageVehicleSummeryReport(int ReportType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate) {
            return base.Channel.GetPortStorageVehicleSummeryReport(ReportType, StartDate, EndDate);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VehicleListingReportProp[]> GetPortStorageVehicleSummeryReportAsync(int ReportType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate) {
            return base.Channel.GetPortStorageVehicleSummeryReportAsync(ReportType, StartDate, EndDate);
        }
        
        public AppWorksService.Properties.PortStorageInventoryList[] GetPortStorageLaneSummaryList() {
            return base.Channel.GetPortStorageLaneSummaryList();
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInventoryList[]> GetPortStorageLaneSummaryListAsync() {
            return base.Channel.GetPortStorageLaneSummaryListAsync();
        }
        
        public AppWorksService.Properties.PortStorageInventoryList[] GetPortStorageInBoundList(System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate) {
            return base.Channel.GetPortStorageInBoundList(StartDate, EndDate);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInventoryList[]> GetPortStorageInBoundListAsync(System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate) {
            return base.Channel.GetPortStorageInBoundListAsync(StartDate, EndDate);
        }
        
        public AppWorksService.Properties.UserApplicationConstantsProp[] GetDAIAddressName(string userCode) {
            return base.Channel.GetDAIAddressName(userCode);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.UserApplicationConstantsProp[]> GetDAIAddressNameAsync(string userCode) {
            return base.Channel.GetDAIAddressNameAsync(userCode);
        }
        
        public AppWorksService.Properties.InvoiceListProp[] LoadInvoiceList(System.Nullable<int> billinID, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate) {
            return base.Channel.LoadInvoiceList(billinID, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.InvoiceListProp[]> LoadInvoiceListAsync(System.Nullable<int> billinID, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate) {
            return base.Channel.LoadInvoiceListAsync(billinID, startDate, endDate);
        }
        
        public AppWorksService.Properties.PortStorageInventoryList[] GetBatchLocationImport() {
            return base.Channel.GetBatchLocationImport();
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInventoryList[]> GetBatchLocationImportAsync() {
            return base.Channel.GetBatchLocationImportAsync();
        }
        
        public AppWorksService.Properties.PortStorageInventoryList[] GetInventoryComparisionList(System.Nullable<int> batchID) {
            return base.Channel.GetInventoryComparisionList(batchID);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInventoryList[]> GetInventoryComparisionListAsync(System.Nullable<int> batchID) {
            return base.Channel.GetInventoryComparisionListAsync(batchID);
        }
        
        public bool UpdateRequestPrintIndexForVehicles(string[] vehicleIds) {
            return base.Channel.UpdateRequestPrintIndexForVehicles(vehicleIds);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRequestPrintIndexForVehiclesAsync(string[] vehicleIds) {
            return base.Channel.UpdateRequestPrintIndexForVehiclesAsync(vehicleIds);
        }
        
        public AppWorksService.Properties.WebPortalUserList[] GetUsers(AppWorksService.Properties.WebPortalUserList objUserList) {
            return base.Channel.GetUsers(objUserList);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.WebPortalUserList[]> GetUsersAsync(AppWorksService.Properties.WebPortalUserList objUserList) {
            return base.Channel.GetUsersAsync(objUserList);
        }
        
        public AppWorksService.Properties.ModuleList[] GetModules(int userID) {
            return base.Channel.GetModules(userID);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.ModuleList[]> GetModulesAsync(int userID) {
            return base.Channel.GetModulesAsync(userID);
        }
        
        public AppWorksService.Properties.UserCustomerList[] GetCustomers(int userID) {
            return base.Channel.GetCustomers(userID);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.UserCustomerList[]> GetCustomersAsync(int userID) {
            return base.Channel.GetCustomersAsync(userID);
        }
        
        public bool AddUser(AppWorksService.Properties.WebPortalUserList objUser) {
            return base.Channel.AddUser(objUser);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(AppWorksService.Properties.WebPortalUserList objUser) {
            return base.Channel.AddUserAsync(objUser);
        }
        
        public bool AddUserCustomer(AppWorksService.Properties.UserCustomerList objUserCustomer) {
            return base.Channel.AddUserCustomer(objUserCustomer);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserCustomerAsync(AppWorksService.Properties.UserCustomerList objUserCustomer) {
            return base.Channel.AddUserCustomerAsync(objUserCustomer);
        }
        
        public bool AddUserModule(AppWorksService.Properties.ModuleList objModuleUser) {
            return base.Channel.AddUserModule(objModuleUser);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserModuleAsync(AppWorksService.Properties.ModuleList objModuleUser) {
            return base.Channel.AddUserModuleAsync(objModuleUser);
        }
        
        public bool DeleteUser(int userID) {
            return base.Channel.DeleteUser(userID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int userID) {
            return base.Channel.DeleteUserAsync(userID);
        }
        
        public AppWorksService.Properties.RoleList[] GetRoles(int userID) {
            return base.Channel.GetRoles(userID);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.RoleList[]> GetRolesAsync(int userID) {
            return base.Channel.GetRolesAsync(userID);
        }
        
        public AppWorksService.Properties.GroupList[] GetGroups(int userID) {
            return base.Channel.GetGroups(userID);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.GroupList[]> GetGroupsAsync(int userID) {
            return base.Channel.GetGroupsAsync(userID);
        }
        
        public bool InsertUpdateUser(AppWorksService.Properties.WebPortalUserList objUser, AppWorksService.Properties.UserCustomerList[] lstUserCustomer, AppWorksService.Properties.ModuleList[] lstUserModules, AppWorksService.Properties.RoleList[] lstUserRoles, AppWorksService.Properties.GroupList[] lstUserGroups) {
            return base.Channel.InsertUpdateUser(objUser, lstUserCustomer, lstUserModules, lstUserRoles, lstUserGroups);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUpdateUserAsync(AppWorksService.Properties.WebPortalUserList objUser, AppWorksService.Properties.UserCustomerList[] lstUserCustomer, AppWorksService.Properties.ModuleList[] lstUserModules, AppWorksService.Properties.RoleList[] lstUserRoles, AppWorksService.Properties.GroupList[] lstUserGroups) {
            return base.Channel.InsertUpdateUserAsync(objUser, lstUserCustomer, lstUserModules, lstUserRoles, lstUserGroups);
        }
        
        public bool CheckDuplicateEmail(string emailID) {
            return base.Channel.CheckDuplicateEmail(emailID);
        }
        
        public System.Threading.Tasks.Task<bool> CheckDuplicateEmailAsync(string emailID) {
            return base.Channel.CheckDuplicateEmailAsync(emailID);
        }
        
        public bool CheckDuplicatePortalUserName(string userName) {
            return base.Channel.CheckDuplicatePortalUserName(userName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckDuplicatePortalUserNameAsync(string userName) {
            return base.Channel.CheckDuplicatePortalUserNameAsync(userName);
        }
        
        public AppWorksService.Properties.PortStorageVehicleProp[] GetPortStorageInventoryDetails(AppWorksService.Properties.PortStorageVehicleProp objPortStorageProp) {
            return base.Channel.GetPortStorageInventoryDetails(objPortStorageProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleProp[]> GetPortStorageInventoryDetailsAsync(AppWorksService.Properties.PortStorageVehicleProp objPortStorageProp) {
            return base.Channel.GetPortStorageInventoryDetailsAsync(objPortStorageProp);
        }
        
        public bool UpdateRequestCheckedVehicles(AppWorksService.Properties.PortStorageVehicleProp[] lstRequestedVechicles, string user) {
            return base.Channel.UpdateRequestCheckedVehicles(lstRequestedVechicles, user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRequestCheckedVehiclesAsync(AppWorksService.Properties.PortStorageVehicleProp[] lstRequestedVechicles, string user) {
            return base.Channel.UpdateRequestCheckedVehiclesAsync(lstRequestedVechicles, user);
        }
        
        public bool CheckMultipleVIN(string vIN) {
            return base.Channel.CheckMultipleVIN(vIN);
        }
        
        public System.Threading.Tasks.Task<bool> CheckMultipleVINAsync(string vIN) {
            return base.Channel.CheckMultipleVINAsync(vIN);
        }
        
        public AppWorksService.Properties.PortStorageVehicleProp GetDecodedPortStorageVIN(string vin) {
            return base.Channel.GetDecodedPortStorageVIN(vin);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleProp> GetDecodedPortStorageVINAsync(string vin) {
            return base.Channel.GetDecodedPortStorageVINAsync(vin);
        }
        
        public bool InsertDecodeVIN(AppWorksService.Properties.VINDecodeList objVINDecode) {
            return base.Channel.InsertDecodeVIN(objVINDecode);
        }
        
        public System.Threading.Tasks.Task<bool> InsertDecodeVINAsync(AppWorksService.Properties.VINDecodeList objVINDecode) {
            return base.Channel.InsertDecodeVINAsync(objVINDecode);
        }
        
        public AppWorksService.Properties.VINDecodeList GetDecodedVINForVINDecode(string vin) {
            return base.Channel.GetDecodedVINForVINDecode(vin);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VINDecodeList> GetDecodedVINForVINDecodeAsync(string vin) {
            return base.Channel.GetDecodedVINForVINDecodeAsync(vin);
        }
        
        public AppWorksService.Properties.VINDecodeList GetDecodeDataFromWeb(string vin, string bodyStylep) {
            return base.Channel.GetDecodeDataFromWeb(vin, bodyStylep);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VINDecodeList> GetDecodeDataFromWebAsync(string vin, string bodyStylep) {
            return base.Channel.GetDecodeDataFromWebAsync(vin, bodyStylep);
        }
        
        public AppWorksService.Properties.RoleList[] GetRolesSelection(int userID) {
            return base.Channel.GetRolesSelection(userID);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.RoleList[]> GetRolesSelectionAsync(int userID) {
            return base.Channel.GetRolesSelectionAsync(userID);
        }
        
        public AppWorksService.Properties.BillingLineItemsProp[] GetBillingRecordExport(int ExportType, System.Nullable<System.DateTime> ExportDate) {
            return base.Channel.GetBillingRecordExport(ExportType, ExportDate);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.BillingLineItemsProp[]> GetBillingRecordExportAsync(int ExportType, System.Nullable<System.DateTime> ExportDate) {
            return base.Channel.GetBillingRecordExportAsync(ExportType, ExportDate);
        }
        
        public int GetBillingExportBatchId() {
            return base.Channel.GetBillingExportBatchId();
        }
        
        public System.Threading.Tasks.Task<int> GetBillingExportBatchIdAsync() {
            return base.Channel.GetBillingExportBatchIdAsync();
        }
        
        public bool SetBillingExportNextBatchId(int BatchId) {
            return base.Channel.SetBillingExportNextBatchId(BatchId);
        }
        
        public System.Threading.Tasks.Task<bool> SetBillingExportNextBatchIdAsync(int BatchId) {
            return base.Channel.SetBillingExportNextBatchIdAsync(BatchId);
        }
        
        public string GetBillingExportFilePath() {
            return base.Channel.GetBillingExportFilePath();
        }
        
        public System.Threading.Tasks.Task<string> GetBillingExportFilePathAsync() {
            return base.Channel.GetBillingExportFilePathAsync();
        }
        
        public void UpdateBillingLineItem(int BatchId, int BillingLineItemsID, string UserCode) {
            base.Channel.UpdateBillingLineItem(BatchId, BillingLineItemsID, UserCode);
        }
        
        public System.Threading.Tasks.Task UpdateBillingLineItemAsync(int BatchId, int BillingLineItemsID, string UserCode) {
            return base.Channel.UpdateBillingLineItemAsync(BatchId, BillingLineItemsID, UserCode);
        }
        
        public void LogErrorToDb(AppWorksService.Properties.ErrorLogProp errorProp) {
            base.Channel.LogErrorToDb(errorProp);
        }
        
        public System.Threading.Tasks.Task LogErrorToDbAsync(AppWorksService.Properties.ErrorLogProp errorProp) {
            return base.Channel.LogErrorToDbAsync(errorProp);
        }
        
        public AppWorksService.Properties.StorageVehicleOutgateProp[] UpdateStorageVehicleOutgate(AppWorksService.Properties.StorageVehicleOutgateProp objStorageVehicleOutgateProp) {
            return base.Channel.UpdateStorageVehicleOutgate(objStorageVehicleOutgateProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.StorageVehicleOutgateProp[]> UpdateStorageVehicleOutgateAsync(AppWorksService.Properties.StorageVehicleOutgateProp objStorageVehicleOutgateProp) {
            return base.Channel.UpdateStorageVehicleOutgateAsync(objStorageVehicleOutgateProp);
        }
        
        public int GetPortStorageVehiclesBatchId() {
            return base.Channel.GetPortStorageVehiclesBatchId();
        }
        
        public System.Threading.Tasks.Task<int> GetPortStorageVehiclesBatchIdAsync() {
            return base.Channel.GetPortStorageVehiclesBatchIdAsync();
        }
        
        public bool SetPortStorageVehiclesNextBatchId(int BatchId) {
            return base.Channel.SetPortStorageVehiclesNextBatchId(BatchId);
        }
        
        public System.Threading.Tasks.Task<bool> SetPortStorageVehiclesNextBatchIdAsync(int BatchId) {
            return base.Channel.SetPortStorageVehiclesNextBatchIdAsync(BatchId);
        }
        
        public AppWorksService.Properties.PortStorageVehicleImportProp ImportPortStorageVehicles(int BatchId, string User) {
            return base.Channel.ImportPortStorageVehicles(BatchId, User);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp> ImportPortStorageVehiclesAsync(int BatchId, string User) {
            return base.Channel.ImportPortStorageVehiclesAsync(BatchId, User);
        }
        
        public AppWorksService.Properties.PortStorageVehicleImportProp[] GetPortStorageVehicleImportList(int BatchId) {
            return base.Channel.GetPortStorageVehicleImportList(BatchId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp[]> GetPortStorageVehicleImportListAsync(int BatchId) {
            return base.Channel.GetPortStorageVehicleImportListAsync(BatchId);
        }
        
        public AppWorksService.Properties.PortStorageVehicleImportProp[] LoadVehiclesBatchList(string Vin) {
            return base.Channel.LoadVehiclesBatchList(Vin);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp[]> LoadVehiclesBatchListAsync(string Vin) {
            return base.Channel.LoadVehiclesBatchListAsync(Vin);
        }
        
        public string GetPortStorageVehiclesImportFileDirectory() {
            return base.Channel.GetPortStorageVehiclesImportFileDirectory();
        }
        
        public System.Threading.Tasks.Task<string> GetPortStorageVehiclesImportFileDirectoryAsync() {
            return base.Channel.GetPortStorageVehiclesImportFileDirectoryAsync();
        }
        
        public string GetPortStorageVehiclesImportFileName() {
            return base.Channel.GetPortStorageVehiclesImportFileName();
        }
        
        public System.Threading.Tasks.Task<string> GetPortStorageVehiclesImportFileNameAsync() {
            return base.Channel.GetPortStorageVehiclesImportFileNameAsync();
        }
        
        public string GetPortStorageVehiclesImportFileArchiveDirectory() {
            return base.Channel.GetPortStorageVehiclesImportFileArchiveDirectory();
        }
        
        public System.Threading.Tasks.Task<string> GetPortStorageVehiclesImportFileArchiveDirectoryAsync() {
            return base.Channel.GetPortStorageVehiclesImportFileArchiveDirectoryAsync();
        }
        
        public int GetPortStorageLocationBatchId() {
            return base.Channel.GetPortStorageLocationBatchId();
        }
        
        public System.Threading.Tasks.Task<int> GetPortStorageLocationBatchIdAsync() {
            return base.Channel.GetPortStorageLocationBatchIdAsync();
        }
        
        public bool SetPortStorageLocationNextBatchId(int BatchId) {
            return base.Channel.SetPortStorageLocationNextBatchId(BatchId);
        }
        
        public System.Threading.Tasks.Task<bool> SetPortStorageLocationNextBatchIdAsync(int BatchId) {
            return base.Channel.SetPortStorageLocationNextBatchIdAsync(BatchId);
        }
        
        public AppWorksService.Properties.PortStorageVehicleImportProp ImportPortStorageLocation(int BatchId, string User) {
            return base.Channel.ImportPortStorageLocation(BatchId, User);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp> ImportPortStorageLocationAsync(int BatchId, string User) {
            return base.Channel.ImportPortStorageLocationAsync(BatchId, User);
        }
        
        public AppWorksService.Properties.PortStorageVehicleImportProp[] GetPortStorageLocationImportList(int BatchId) {
            return base.Channel.GetPortStorageLocationImportList(BatchId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp[]> GetPortStorageLocationImportListAsync(int BatchId) {
            return base.Channel.GetPortStorageLocationImportListAsync(BatchId);
        }
        
        public AppWorksService.Properties.PortStorageVehicleImportProp[] LoadLocationBatchList(string Vin) {
            return base.Channel.LoadLocationBatchList(Vin);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleImportProp[]> LoadLocationBatchListAsync(string Vin) {
            return base.Channel.LoadLocationBatchListAsync(Vin);
        }
        
        public string GetPortStorageLocationImportFileName() {
            return base.Channel.GetPortStorageLocationImportFileName();
        }
        
        public System.Threading.Tasks.Task<string> GetPortStorageLocationImportFileNameAsync() {
            return base.Channel.GetPortStorageLocationImportFileNameAsync();
        }
        
        public bool LocationImportTransactionProcess(int BatchId, string User) {
            return base.Channel.LocationImportTransactionProcess(BatchId, User);
        }
        
        public System.Threading.Tasks.Task<bool> LocationImportTransactionProcessAsync(int BatchId, string User) {
            return base.Channel.LocationImportTransactionProcessAsync(BatchId, User);
        }
        
        public bool VehicleImportTransactionProcess(int BatchId, string User) {
            return base.Channel.VehicleImportTransactionProcess(BatchId, User);
        }
        
        public System.Threading.Tasks.Task<bool> VehicleImportTransactionProcessAsync(int BatchId, string User) {
            return base.Channel.VehicleImportTransactionProcessAsync(BatchId, User);
        }
        
        public AppWorksService.Properties.AdminUserProp[] GetSystemSettings() {
            return base.Channel.GetSystemSettings();
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.AdminUserProp[]> GetSystemSettingsAsync() {
            return base.Channel.GetSystemSettingsAsync();
        }
        
        public bool UpdateCompanyInfo(AppWorksService.Properties.UserApplicationConstantsProp objCompanyinfo) {
            return base.Channel.UpdateCompanyInfo(objCompanyinfo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCompanyInfoAsync(AppWorksService.Properties.UserApplicationConstantsProp objCompanyinfo) {
            return base.Channel.UpdateCompanyInfoAsync(objCompanyinfo);
        }
        
        public AppWorksService.Properties.PortStorageVehicleProp[] GetStorageVehicleDetails(AppWorksService.Properties.PortStorageVehicleProp objPortstorageProp) {
            return base.Channel.GetStorageVehicleDetails(objPortstorageProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleProp[]> GetStorageVehicleDetailsAsync(AppWorksService.Properties.PortStorageVehicleProp objPortstorageProp) {
            return base.Channel.GetStorageVehicleDetailsAsync(objPortstorageProp);
        }
        
        public AppWorksService.Properties.BillingLineItemsProp[] GetLineItemsList(AppWorksService.Properties.BillingLineItemsProp objLineItems) {
            return base.Channel.GetLineItemsList(objLineItems);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.BillingLineItemsProp[]> GetLineItemsListAsync(AppWorksService.Properties.BillingLineItemsProp objLineItems) {
            return base.Channel.GetLineItemsListAsync(objLineItems);
        }
        
        public bool ResetExportedInd(int billingID) {
            return base.Channel.ResetExportedInd(billingID);
        }
        
        public System.Threading.Tasks.Task<bool> ResetExportedIndAsync(int billingID) {
            return base.Channel.ResetExportedIndAsync(billingID);
        }
        
        public int InsertBilling(AppWorksService.Properties.BillingListProp objBillingProp) {
            return base.Channel.InsertBilling(objBillingProp);
        }
        
        public System.Threading.Tasks.Task<int> InsertBillingAsync(AppWorksService.Properties.BillingListProp objBillingProp) {
            return base.Channel.InsertBillingAsync(objBillingProp);
        }
        
        public bool UpdateBillingTab(AppWorksService.Properties.BillingListProp objBillingProp) {
            return base.Channel.UpdateBillingTab(objBillingProp);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBillingTabAsync(AppWorksService.Properties.BillingListProp objBillingProp) {
            return base.Channel.UpdateBillingTabAsync(objBillingProp);
        }
        
        public bool DeleteBillingData(int BillingID) {
            return base.Channel.DeleteBillingData(BillingID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBillingDataAsync(int BillingID) {
            return base.Channel.DeleteBillingDataAsync(BillingID);
        }
        
        public AppWorksService.Properties.BillingProp[] BillingSearch(AppWorksService.Properties.BillingProp objPortStorageProp) {
            return base.Channel.BillingSearch(objPortStorageProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.BillingProp[]> BillingSearchAsync(AppWorksService.Properties.BillingProp objPortStorageProp) {
            return base.Channel.BillingSearchAsync(objPortStorageProp);
        }
        
        public AppWorksService.Properties.BillingListProp GetBillingData(int billingID) {
            return base.Channel.GetBillingData(billingID);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.BillingListProp> GetBillingDataAsync(int billingID) {
            return base.Channel.GetBillingDataAsync(billingID);
        }
        
        public AppWorksService.Properties.StorageVehicleOutgateProp UpdateStorageVehicleOutgateData(AppWorksService.Properties.StorageVehicleOutgateProp objStorageVehicleOutgateProp) {
            return base.Channel.UpdateStorageVehicleOutgateData(objStorageVehicleOutgateProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.StorageVehicleOutgateProp> UpdateStorageVehicleOutgateDataAsync(AppWorksService.Properties.StorageVehicleOutgateProp objStorageVehicleOutgateProp) {
            return base.Channel.UpdateStorageVehicleOutgateDataAsync(objStorageVehicleOutgateProp);
        }
        
        public bool UpdateSystemSettings(AppWorksService.Properties.AdminUserProp setting) {
            return base.Channel.UpdateSystemSettings(setting);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSystemSettingsAsync(AppWorksService.Properties.AdminUserProp setting) {
            return base.Channel.UpdateSystemSettingsAsync(setting);
        }
        
        public AppWorksService.Properties.AdminUserProp[] FindSystemSettings(AppWorksService.Properties.AdminUserProp setting) {
            return base.Channel.FindSystemSettings(setting);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.AdminUserProp[]> FindSystemSettingsAsync(AppWorksService.Properties.AdminUserProp setting) {
            return base.Channel.FindSystemSettingsAsync(setting);
        }
        
        public bool DeleteSystemSettings(AppWorksService.Properties.AdminUserProp setting) {
            return base.Channel.DeleteSystemSettings(setting);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSystemSettingsAsync(AppWorksService.Properties.AdminUserProp setting) {
            return base.Channel.DeleteSystemSettingsAsync(setting);
        }
        
        public bool InsertSystemSettings(AppWorksService.Properties.AdminUserProp setting) {
            return base.Channel.InsertSystemSettings(setting);
        }
        
        public System.Threading.Tasks.Task<bool> InsertSystemSettingsAsync(AppWorksService.Properties.AdminUserProp setting) {
            return base.Channel.InsertSystemSettingsAsync(setting);
        }
        
        public AppWorksService.Properties.LoginProperties GetLoggedInUserDetails(AppWorksService.Properties.LoginProperties objLoginProp) {
            return base.Channel.GetLoggedInUserDetails(objLoginProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.LoginProperties> GetLoggedInUserDetailsAsync(AppWorksService.Properties.LoginProperties objLoginProp) {
            return base.Channel.GetLoggedInUserDetailsAsync(objLoginProp);
        }
        
        public AppWorksService.Properties.LoginResult ValidateLogin(AppWorksService.Properties.LoginProperties objLoginProp) {
            return base.Channel.ValidateLogin(objLoginProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.LoginResult> ValidateLoginAsync(AppWorksService.Properties.LoginProperties objLoginProp) {
            return base.Channel.ValidateLoginAsync(objLoginProp);
        }
        
        public string[] GetUserRole(AppWorksService.Properties.LoginProperties objLoginProp) {
            return base.Channel.GetUserRole(objLoginProp);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserRoleAsync(AppWorksService.Properties.LoginProperties objLoginProp) {
            return base.Channel.GetUserRoleAsync(objLoginProp);
        }
        
        public string UserName(AppWorksService.Properties.LoginProperties objLoginProp) {
            return base.Channel.UserName(objLoginProp);
        }
        
        public System.Threading.Tasks.Task<string> UserNameAsync(AppWorksService.Properties.LoginProperties objLoginProp) {
            return base.Channel.UserNameAsync(objLoginProp);
        }
        
        public bool IsUserExists(AppWorksService.Properties.AdminUserProp objAdminUserProp, AppWorksService.Properties.RoleList[] lstRoles) {
            return base.Channel.IsUserExists(objAdminUserProp, lstRoles);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserExistsAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp, AppWorksService.Properties.RoleList[] lstRoles) {
            return base.Channel.IsUserExistsAsync(objAdminUserProp, lstRoles);
        }
        
        public string[] ExistingUserRole(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.ExistingUserRole(objAdminUserProp);
        }
        
        public System.Threading.Tasks.Task<string[]> ExistingUserRoleAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.ExistingUserRoleAsync(objAdminUserProp);
        }
        
        public string[] AllRoles(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.AllRoles(objAdminUserProp);
        }
        
        public System.Threading.Tasks.Task<string[]> AllRolesAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.AllRolesAsync(objAdminUserProp);
        }
        
        public string[] ModifiedUserRole(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.ModifiedUserRole(objAdminUserProp);
        }
        
        public System.Threading.Tasks.Task<string[]> ModifiedUserRoleAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.ModifiedUserRoleAsync(objAdminUserProp);
        }
        
        public string[] RemoveUserRole(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.RemoveUserRole(objAdminUserProp);
        }
        
        public System.Threading.Tasks.Task<string[]> RemoveUserRoleAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.RemoveUserRoleAsync(objAdminUserProp);
        }
        
        public string[] RecordList() {
            return base.Channel.RecordList();
        }
        
        public System.Threading.Tasks.Task<string[]> RecordListAsync() {
            return base.Channel.RecordListAsync();
        }
        
        public string[] RoleList() {
            return base.Channel.RoleList();
        }
        
        public System.Threading.Tasks.Task<string[]> RoleListAsync() {
            return base.Channel.RoleListAsync();
        }
        
        public AppWorksService.Properties.FindUserDetails[] GetUserRecord(AppWorksService.Properties.FindUserProp objFindUserProp) {
            return base.Channel.GetUserRecord(objFindUserProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.FindUserDetails[]> GetUserRecordAsync(AppWorksService.Properties.FindUserProp objFindUserProp) {
            return base.Channel.GetUserRecordAsync(objFindUserProp);
        }
        
        public AppWorksService.Properties.AdminUserDeatils GetModificationRecord(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.GetModificationRecord(objAdminUserProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.AdminUserDeatils> GetModificationRecordAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.GetModificationRecordAsync(objAdminUserProp);
        }
        
        public void UpdateUserDetails(AppWorksService.Properties.AdminUserProp objAdminUserProp, AppWorksService.Properties.RoleList[] lstRoles) {
            base.Channel.UpdateUserDetails(objAdminUserProp, lstRoles);
        }
        
        public System.Threading.Tasks.Task UpdateUserDetailsAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp, AppWorksService.Properties.RoleList[] lstRoles) {
            return base.Channel.UpdateUserDetailsAsync(objAdminUserProp, lstRoles);
        }
        
        public void DeleteUserDetails(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            base.Channel.DeleteUserDetails(objAdminUserProp);
        }
        
        public System.Threading.Tasks.Task DeleteUserDetailsAsync(AppWorksService.Properties.AdminUserProp objAdminUserProp) {
            return base.Channel.DeleteUserDetailsAsync(objAdminUserProp);
        }
        
        public int RemoveUserDetails(AppWorksService.Properties.FindUserProp objFindUserProp) {
            return base.Channel.RemoveUserDetails(objFindUserProp);
        }
        
        public System.Threading.Tasks.Task<int> RemoveUserDetailsAsync(AppWorksService.Properties.FindUserProp objFindUserProp) {
            return base.Channel.RemoveUserDetailsAsync(objFindUserProp);
        }
        
        public AppWorksService.Properties.VehicleProp[] GetVehicleSearchDetails(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.GetVehicleSearchDetails(objVehicleProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> GetVehicleSearchDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.GetVehicleSearchDetailsAsync(objVehicleProp);
        }
        
        public int InsertVehicleDetails(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.InsertVehicleDetails(objVehicleProp);
        }
        
        public System.Threading.Tasks.Task<int> InsertVehicleDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.InsertVehicleDetailsAsync(objVehicleProp);
        }
        
        public AppWorksService.Properties.PerDiemProp[] GetPerDiemVehicalDetails(int portStorageVehiclesId) {
            return base.Channel.GetPerDiemVehicalDetails(portStorageVehiclesId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PerDiemProp[]> GetPerDiemVehicalDetailsAsync(int portStorageVehiclesId) {
            return base.Channel.GetPerDiemVehicalDetailsAsync(portStorageVehiclesId);
        }
        
        public int EditDamageCode(AppWorksService.Properties.PortStorageDamageDetailsProp objPortStorageDamageDetailsProp) {
            return base.Channel.EditDamageCode(objPortStorageDamageDetailsProp);
        }
        
        public System.Threading.Tasks.Task<int> EditDamageCodeAsync(AppWorksService.Properties.PortStorageDamageDetailsProp objPortStorageDamageDetailsProp) {
            return base.Channel.EditDamageCodeAsync(objPortStorageDamageDetailsProp);
        }
        
        public AppWorksService.Properties.CustomerSearchProp[] GetCustomerSearchDetails(AppWorksService.Properties.CustomerSearchProp objCustomerProp) {
            return base.Channel.GetCustomerSearchDetails(objCustomerProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.CustomerSearchProp[]> GetCustomerSearchDetailsAsync(AppWorksService.Properties.CustomerSearchProp objCustomerProp) {
            return base.Channel.GetCustomerSearchDetailsAsync(objCustomerProp);
        }
        
        public AppWorksService.Properties.PerDiemProp[] GetVehiclePerDiemSearchDetails(int portStorageVehiclesId) {
            return base.Channel.GetVehiclePerDiemSearchDetails(portStorageVehiclesId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PerDiemProp[]> GetVehiclePerDiemSearchDetailsAsync(int portStorageVehiclesId) {
            return base.Channel.GetVehiclePerDiemSearchDetailsAsync(portStorageVehiclesId);
        }
        
        public int UpdatePortStorageProcessignDetails(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.UpdatePortStorageProcessignDetails(objVehicleProp);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePortStorageProcessignDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.UpdatePortStorageProcessignDetailsAsync(objVehicleProp);
        }
        
        public string[] CustomerType() {
            return base.Channel.CustomerType();
        }
        
        public System.Threading.Tasks.Task<string[]> CustomerTypeAsync() {
            return base.Channel.CustomerTypeAsync();
        }
        
        public int DecodeVIN(string Vin) {
            return base.Channel.DecodeVIN(Vin);
        }
        
        public System.Threading.Tasks.Task<int> DecodeVINAsync(string Vin) {
            return base.Channel.DecodeVINAsync(Vin);
        }
        
        public AppWorksService.Properties.VehicleProp[] GetPortStorageProcessignDetails(string VIN) {
            return base.Channel.GetPortStorageProcessignDetails(VIN);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> GetPortStorageProcessignDetailsAsync(string VIN) {
            return base.Channel.GetPortStorageProcessignDetailsAsync(VIN);
        }
        
        public int UpdatePortStorageDateOutProcessignDetails(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.UpdatePortStorageDateOutProcessignDetails(objVehicleProp);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePortStorageDateOutProcessignDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.UpdatePortStorageDateOutProcessignDetailsAsync(objVehicleProp);
        }
        
        public AppWorksService.Properties.VehicleProp[] GetPortStorageDateOutProcessignDetails(string VIN) {
            return base.Channel.GetPortStorageDateOutProcessignDetails(VIN);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> GetPortStorageDateOutProcessignDetailsAsync(string VIN) {
            return base.Channel.GetPortStorageDateOutProcessignDetailsAsync(VIN);
        }
        
        public AppWorksService.Properties.PortStorageLocationHistoryProp[] GetLocationHistory(int portStorageVehicalID) {
            return base.Channel.GetLocationHistory(portStorageVehicalID);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageLocationHistoryProp[]> GetLocationHistoryAsync(int portStorageVehicalID) {
            return base.Channel.GetLocationHistoryAsync(portStorageVehicalID);
        }
        
        public AppWorksService.Properties.VehicleProp GetVecheleDetailByVIN(string VIN, System.Nullable<int> vehicleId) {
            return base.Channel.GetVecheleDetailByVIN(VIN, vehicleId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp> GetVecheleDetailByVINAsync(string VIN, System.Nullable<int> vehicleId) {
            return base.Channel.GetVecheleDetailByVINAsync(VIN, vehicleId);
        }
        
        public string RequestBatchProcess(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.RequestBatchProcess(objVehicleProp);
        }
        
        public System.Threading.Tasks.Task<string> RequestBatchProcessAsync(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.RequestBatchProcessAsync(objVehicleProp);
        }
        
        public string DateOutBatchProcess(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.DateOutBatchProcess(objVehicleProp);
        }
        
        public System.Threading.Tasks.Task<string> DateOutBatchProcessAsync(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.DateOutBatchProcessAsync(objVehicleProp);
        }
        
        public AppWorksService.Properties.VehicleProp[] CheckMultipleVecheleDetailByVIN(string VIN) {
            return base.Channel.CheckMultipleVecheleDetailByVIN(VIN);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> CheckMultipleVecheleDetailByVINAsync(string VIN) {
            return base.Channel.CheckMultipleVecheleDetailByVINAsync(VIN);
        }
        
        public string[] InspectionTypeOnly() {
            return base.Channel.InspectionTypeOnly();
        }
        
        public System.Threading.Tasks.Task<string[]> InspectionTypeOnlyAsync() {
            return base.Channel.InspectionTypeOnlyAsync();
        }
        
        public string[] VehicalStatusList() {
            return base.Channel.VehicalStatusList();
        }
        
        public System.Threading.Tasks.Task<string[]> VehicalStatusListAsync() {
            return base.Channel.VehicalStatusListAsync();
        }
        
        public AppWorksService.Properties.VehicleProp[] CallVehialDetailsbyVIN(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.CallVehialDetailsbyVIN(objVehicleProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.VehicleProp[]> CallVehialDetailsbyVINAsync(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.CallVehialDetailsbyVINAsync(objVehicleProp);
        }
        
        public bool UpdateVehicalSearchDetails(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.UpdateVehicalSearchDetails(objVehicleProp);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateVehicalSearchDetailsAsync(AppWorksService.Properties.VehicleProp objVehicleProp) {
            return base.Channel.UpdateVehicalSearchDetailsAsync(objVehicleProp);
        }
        
        public AppWorksService.Properties.PortStorageDamageDetailsProp[] BindVehicleDamageDetail(int portStorageVehiclesId) {
            return base.Channel.BindVehicleDamageDetail(portStorageVehiclesId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageDamageDetailsProp[]> BindVehicleDamageDetailAsync(int portStorageVehiclesId) {
            return base.Channel.BindVehicleDamageDetailAsync(portStorageVehiclesId);
        }
        
        public int AddDamageCode(AppWorksService.Properties.DamageCodeProp objDamageCodeProp) {
            return base.Channel.AddDamageCode(objDamageCodeProp);
        }
        
        public System.Threading.Tasks.Task<int> AddDamageCodeAsync(AppWorksService.Properties.DamageCodeProp objDamageCodeProp) {
            return base.Channel.AddDamageCodeAsync(objDamageCodeProp);
        }
        
        public bool DeleteVehicalSearchDetails(int VehicleId) {
            return base.Channel.DeleteVehicalSearchDetails(VehicleId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteVehicalSearchDetailsAsync(int VehicleId) {
            return base.Channel.DeleteVehicalSearchDetailsAsync(VehicleId);
        }
        
        public int AddBillingPeriod(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop) {
            return base.Channel.AddBillingPeriod(objBillingPeriodprop);
        }
        
        public System.Threading.Tasks.Task<int> AddBillingPeriodAsync(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop) {
            return base.Channel.AddBillingPeriodAsync(objBillingPeriodprop);
        }
        
        public AppWorksService.Properties.BillingPeriodprop[] FindBillingPeriod(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop) {
            return base.Channel.FindBillingPeriod(objBillingPeriodprop);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.BillingPeriodprop[]> FindBillingPeriodAsync(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop) {
            return base.Channel.FindBillingPeriodAsync(objBillingPeriodprop);
        }
        
        public int AddCodeAdmin(AppWorksService.Properties.CodeProp objCodeProp) {
            return base.Channel.AddCodeAdmin(objCodeProp);
        }
        
        public System.Threading.Tasks.Task<int> AddCodeAdminAsync(AppWorksService.Properties.CodeProp objCodeProp) {
            return base.Channel.AddCodeAdminAsync(objCodeProp);
        }
        
        public string[] CodeTypeList() {
            return base.Channel.CodeTypeList();
        }
        
        public System.Threading.Tasks.Task<string[]> CodeTypeListAsync() {
            return base.Channel.CodeTypeListAsync();
        }
        
        public bool UpdateBillingPeriodAdminDetails(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop) {
            return base.Channel.UpdateBillingPeriodAdminDetails(objBillingPeriodprop);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBillingPeriodAdminDetailsAsync(AppWorksService.Properties.BillingPeriodprop objBillingPeriodprop) {
            return base.Channel.UpdateBillingPeriodAdminDetailsAsync(objBillingPeriodprop);
        }
        
        public bool DeleteBillingPeriodAdminDetails(int BillingPeriodId) {
            return base.Channel.DeleteBillingPeriodAdminDetails(BillingPeriodId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBillingPeriodAdminDetailsAsync(int BillingPeriodId) {
            return base.Channel.DeleteBillingPeriodAdminDetailsAsync(BillingPeriodId);
        }
        
        public AppWorksService.Properties.CodeProp[] FindCode(AppWorksService.Properties.CodeProp objCodeProp) {
            return base.Channel.FindCode(objCodeProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.CodeProp[]> FindCodeAsync(AppWorksService.Properties.CodeProp objCodeProp) {
            return base.Channel.FindCodeAsync(objCodeProp);
        }
        
        public bool ModifyCodeAdminRecord(AppWorksService.Properties.CodeProp objCodeProp) {
            return base.Channel.ModifyCodeAdminRecord(objCodeProp);
        }
        
        public System.Threading.Tasks.Task<bool> ModifyCodeAdminRecordAsync(AppWorksService.Properties.CodeProp objCodeProp) {
            return base.Channel.ModifyCodeAdminRecordAsync(objCodeProp);
        }
        
        public bool DeleteCodeAdminDetails(int CodeId) {
            return base.Channel.DeleteCodeAdminDetails(CodeId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCodeAdminDetailsAsync(int CodeId) {
            return base.Channel.DeleteCodeAdminDetailsAsync(CodeId);
        }
        
        public AppWorksService.Properties.PortStorageInvoicesProp[] GetPortStorageInvoicesList(System.Nullable<System.DateTime> cutoffDate) {
            return base.Channel.GetPortStorageInvoicesList(cutoffDate);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageInvoicesProp[]> GetPortStorageInvoicesListAsync(System.Nullable<System.DateTime> cutoffDate) {
            return base.Channel.GetPortStorageInvoicesListAsync(cutoffDate);
        }
        
        public AppWorksService.Properties.CodeList[] LoadCodeList(string codeType) {
            return base.Channel.LoadCodeList(codeType);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.CodeList[]> LoadCodeListAsync(string codeType) {
            return base.Channel.LoadCodeListAsync(codeType);
        }
        
        public AppWorksService.Properties.LocationList[] GetLocationList(AppWorksService.Properties.LocationList objLocationProp) {
            return base.Channel.GetLocationList(objLocationProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.LocationList[]> GetLocationListAsync(AppWorksService.Properties.LocationList objLocationProp) {
            return base.Channel.GetLocationListAsync(objLocationProp);
        }
        
        public AppWorksService.Properties.LocationList[] GetBillingStreetAddress(int addressID) {
            return base.Channel.GetBillingStreetAddress(addressID);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.LocationList[]> GetBillingStreetAddressAsync(int addressID) {
            return base.Channel.GetBillingStreetAddressAsync(addressID);
        }
        
        public AppWorksService.Properties.CustomerNoteList[] NotesList(int customerID, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate) {
            return base.Channel.NotesList(customerID, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.CustomerNoteList[]> NotesListAsync(int customerID, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate) {
            return base.Channel.NotesListAsync(customerID, startDate, endDate);
        }
        
        public AppWorksService.Properties.PortStorageRateList[] GetPortStorageRateList(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp) {
            return base.Channel.GetPortStorageRateList(objPortStorageRateProp);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageRateList[]> GetPortStorageRateListAsync(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp) {
            return base.Channel.GetPortStorageRateListAsync(objPortStorageRateProp);
        }
        
        public bool AddPortStorageRate(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp) {
            return base.Channel.AddPortStorageRate(objPortStorageRateProp);
        }
        
        public System.Threading.Tasks.Task<bool> AddPortStorageRateAsync(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp) {
            return base.Channel.AddPortStorageRateAsync(objPortStorageRateProp);
        }
        
        public bool UpdatePortStorageRate(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp) {
            return base.Channel.UpdatePortStorageRate(objPortStorageRateProp);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePortStorageRateAsync(AppWorksService.Properties.PortStorageRateList objPortStorageRateProp) {
            return base.Channel.UpdatePortStorageRateAsync(objPortStorageRateProp);
        }
        
        public bool DeletePortStorageRate(int portStorageRateID) {
            return base.Channel.DeletePortStorageRate(portStorageRateID);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePortStorageRateAsync(int portStorageRateID) {
            return base.Channel.DeletePortStorageRateAsync(portStorageRateID);
        }
        
        public AppWorksService.Properties.LocationList[] LoadPerformanceStndrdOriginLocationList() {
            return base.Channel.LoadPerformanceStndrdOriginLocationList();
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.LocationList[]> LoadPerformanceStndrdOriginLocationListAsync() {
            return base.Channel.LoadPerformanceStndrdOriginLocationListAsync();
        }
        
        public bool AddLocationEmailContact(AppWorksService.Properties.LocationEmailContactList objLocationEmailContact) {
            return base.Channel.AddLocationEmailContact(objLocationEmailContact);
        }
        
        public System.Threading.Tasks.Task<bool> AddLocationEmailContactAsync(AppWorksService.Properties.LocationEmailContactList objLocationEmailContact) {
            return base.Channel.AddLocationEmailContactAsync(objLocationEmailContact);
        }
        
        public bool AddLocationPerformanceStandard(AppWorksService.Properties.LocationPerformanceStandardList objLocationPerformanceStandard) {
            return base.Channel.AddLocationPerformanceStandard(objLocationPerformanceStandard);
        }
        
        public System.Threading.Tasks.Task<bool> AddLocationPerformanceStandardAsync(AppWorksService.Properties.LocationPerformanceStandardList objLocationPerformanceStandard) {
            return base.Channel.AddLocationPerformanceStandardAsync(objLocationPerformanceStandard);
        }
        
        public bool UpdateLocationEmailContact(AppWorksService.Properties.LocationEmailContactList objLocationEmailContact) {
            return base.Channel.UpdateLocationEmailContact(objLocationEmailContact);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLocationEmailContactAsync(AppWorksService.Properties.LocationEmailContactList objLocationEmailContact) {
            return base.Channel.UpdateLocationEmailContactAsync(objLocationEmailContact);
        }
        
        public bool UpdateLocationPerformanceStandard(AppWorksService.Properties.LocationPerformanceStandardList objLocationPerformanceStandard) {
            return base.Channel.UpdateLocationPerformanceStandard(objLocationPerformanceStandard);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLocationPerformanceStandardAsync(AppWorksService.Properties.LocationPerformanceStandardList objLocationPerformanceStandard) {
            return base.Channel.UpdateLocationPerformanceStandardAsync(objLocationPerformanceStandard);
        }
        
        public int AddLocation(AppWorksService.Properties.LocationList objLocation) {
            return base.Channel.AddLocation(objLocation);
        }
        
        public System.Threading.Tasks.Task<int> AddLocationAsync(AppWorksService.Properties.LocationList objLocation) {
            return base.Channel.AddLocationAsync(objLocation);
        }
        
        public bool AddCustomerNotes(AppWorksService.Properties.CustomerNoteList objCustomerNotes) {
            return base.Channel.AddCustomerNotes(objCustomerNotes);
        }
        
        public System.Threading.Tasks.Task<bool> AddCustomerNotesAsync(AppWorksService.Properties.CustomerNoteList objCustomerNotes) {
            return base.Channel.AddCustomerNotesAsync(objCustomerNotes);
        }
        
        public bool UpdateCustomerNotes(AppWorksService.Properties.CustomerNoteList objCustomerNotes) {
            return base.Channel.UpdateCustomerNotes(objCustomerNotes);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCustomerNotesAsync(AppWorksService.Properties.CustomerNoteList objCustomerNotes) {
            return base.Channel.UpdateCustomerNotesAsync(objCustomerNotes);
        }
        
        public bool UpdateCustomerSearchDetails(AppWorksService.Properties.CustomerSearchProp objcustomer) {
            return base.Channel.UpdateCustomerSearchDetails(objcustomer);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCustomerSearchDetailsAsync(AppWorksService.Properties.CustomerSearchProp objcustomer) {
            return base.Channel.UpdateCustomerSearchDetailsAsync(objcustomer);
        }
        
        public int InsertCustomer(AppWorksService.Properties.CustomerSearchProp objCustomer) {
            return base.Channel.InsertCustomer(objCustomer);
        }
        
        public System.Threading.Tasks.Task<int> InsertCustomerAsync(AppWorksService.Properties.CustomerSearchProp objCustomer) {
            return base.Channel.InsertCustomerAsync(objCustomer);
        }
        
        public bool DeleteLocation(int locationID) {
            return base.Channel.DeleteLocation(locationID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLocationAsync(int locationID) {
            return base.Channel.DeleteLocationAsync(locationID);
        }
        
        public bool UpdateBilling(AppWorksService.Properties.BillingProp objBillingprop) {
            return base.Channel.UpdateBilling(objBillingprop);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBillingAsync(AppWorksService.Properties.BillingProp objBillingprop) {
            return base.Channel.UpdateBillingAsync(objBillingprop);
        }
        
        public bool UpdatePostStorageVehicles(AppWorksService.Properties.PortStorageVehicleProp objPortStorageVehicleProp) {
            return base.Channel.UpdatePostStorageVehicles(objPortStorageVehicleProp);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePostStorageVehiclesAsync(AppWorksService.Properties.PortStorageVehicleProp objPortStorageVehicleProp) {
            return base.Channel.UpdatePostStorageVehiclesAsync(objPortStorageVehicleProp);
        }
        
        public int InsertBillingId(AppWorksService.Properties.BillingProp objBillingprop) {
            return base.Channel.InsertBillingId(objBillingprop);
        }
        
        public System.Threading.Tasks.Task<int> InsertBillingIdAsync(AppWorksService.Properties.BillingProp objBillingprop) {
            return base.Channel.InsertBillingIdAsync(objBillingprop);
        }
        
        public string SetDefaultvalue(string valueKey) {
            return base.Channel.SetDefaultvalue(valueKey);
        }
        
        public System.Threading.Tasks.Task<string> SetDefaultvalueAsync(string valueKey) {
            return base.Channel.SetDefaultvalueAsync(valueKey);
        }
        
        public bool UpdateSettingsValue(string invoiceNumber) {
            return base.Channel.UpdateSettingsValue(invoiceNumber);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSettingsValueAsync(string invoiceNumber) {
            return base.Channel.UpdateSettingsValueAsync(invoiceNumber);
        }
        
        public bool UpdateNextInvoiceNumberValue(string iInvoiceNumber) {
            return base.Channel.UpdateNextInvoiceNumberValue(iInvoiceNumber);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateNextInvoiceNumberValueAsync(string iInvoiceNumber) {
            return base.Channel.UpdateNextInvoiceNumberValueAsync(iInvoiceNumber);
        }
        
        public int GetBillingCount(string invoiceNumber) {
            return base.Channel.GetBillingCount(invoiceNumber);
        }
        
        public System.Threading.Tasks.Task<int> GetBillingCountAsync(string invoiceNumber) {
            return base.Channel.GetBillingCountAsync(invoiceNumber);
        }
        
        public AppWorksService.Properties.PortStorageVehicleProp[] GetPortStorageVehicleList(System.Nullable<System.DateTime> cutoffDate, int customerId) {
            return base.Channel.GetPortStorageVehicleList(cutoffDate, customerId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PortStorageVehicleProp[]> GetPortStorageVehicleListAsync(System.Nullable<System.DateTime> cutoffDate, int customerId) {
            return base.Channel.GetPortStorageVehicleListAsync(cutoffDate, customerId);
        }
        
        public bool UpdateLocation(AppWorksService.Properties.LocationList objLocation) {
            return base.Channel.UpdateLocation(objLocation);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateLocationAsync(AppWorksService.Properties.LocationList objLocation) {
            return base.Channel.UpdateLocationAsync(objLocation);
        }
        
        public string CalculatePortStoragePerDiem(int psVehicleId, string userCode) {
            return base.Channel.CalculatePortStoragePerDiem(psVehicleId, userCode);
        }
        
        public System.Threading.Tasks.Task<string> CalculatePortStoragePerDiemAsync(int psVehicleId, string userCode) {
            return base.Channel.CalculatePortStoragePerDiemAsync(psVehicleId, userCode);
        }
        
        public int PsRatesCount(System.Nullable<System.DateTime> startDate, int customerId) {
            return base.Channel.PsRatesCount(startDate, customerId);
        }
        
        public System.Threading.Tasks.Task<int> PsRatesCountAsync(System.Nullable<System.DateTime> startDate, int customerId) {
            return base.Channel.PsRatesCountAsync(startDate, customerId);
        }
        
        public AppWorksService.Properties.PSRatesInvoiceProp PsRatesInvoice(System.Nullable<System.DateTime> startDate, int customerId) {
            return base.Channel.PsRatesInvoice(startDate, customerId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.PSRatesInvoiceProp> PsRatesInvoiceAsync(System.Nullable<System.DateTime> startDate, int customerId) {
            return base.Channel.PsRatesInvoiceAsync(startDate, customerId);
        }
        
        public bool UpdateVehicleRates(System.Nullable<decimal> entryRate, System.Nullable<int> perDiemGraceDays, int vehicleID) {
            return base.Channel.UpdateVehicleRates(entryRate, perDiemGraceDays, vehicleID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateVehicleRatesAsync(System.Nullable<decimal> entryRate, System.Nullable<int> perDiemGraceDays, int vehicleID) {
            return base.Channel.UpdateVehicleRatesAsync(entryRate, perDiemGraceDays, vehicleID);
        }
        
        public bool CheckDuplicateCodeAndType(string code, string codeType) {
            return base.Channel.CheckDuplicateCodeAndType(code, codeType);
        }
        
        public System.Threading.Tasks.Task<bool> CheckDuplicateCodeAndTypeAsync(string code, string codeType) {
            return base.Channel.CheckDuplicateCodeAndTypeAsync(code, codeType);
        }
        
        public AppWorksService.Properties.CustomerSearchProp GetCustomerInfo(int customerId) {
            return base.Channel.GetCustomerInfo(customerId);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.CustomerSearchProp> GetCustomerInfoAsync(int customerId) {
            return base.Channel.GetCustomerInfoAsync(customerId);
        }
        
        public AppWorksService.Properties.LoadInfoList[] GetLoadInfo(int billingId, decimal pvRatePercentage) {
            return base.Channel.GetLoadInfo(billingId, pvRatePercentage);
        }
        
        public System.Threading.Tasks.Task<AppWorksService.Properties.LoadInfoList[]> GetLoadInfoAsync(int billingId, decimal pvRatePercentage) {
            return base.Channel.GetLoadInfoAsync(billingId, pvRatePercentage);
        }
    }
}
